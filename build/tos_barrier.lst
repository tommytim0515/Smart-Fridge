ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"tos_barrier.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.tos_barrier_create,"ax",%progbits
  16              		.align	1
  17              		.global	tos_barrier_create
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	tos_barrier_create:
  25              	.LVL0:
  26              	.LFB110:
  27              		.file 1 "..//kernel/core/tos_barrier.c"
   1:..//kernel/core/tos_barrier.c **** /*----------------------------------------------------------------------------
   2:..//kernel/core/tos_barrier.c ****  * Tencent is pleased to support the open source community by making TencentOS
   3:..//kernel/core/tos_barrier.c ****  * available.
   4:..//kernel/core/tos_barrier.c ****  *
   5:..//kernel/core/tos_barrier.c ****  * Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
   6:..//kernel/core/tos_barrier.c ****  * If you have downloaded a copy of the TencentOS binary from Tencent, please
   7:..//kernel/core/tos_barrier.c ****  * note that the TencentOS binary is licensed under the BSD 3-Clause License.
   8:..//kernel/core/tos_barrier.c ****  *
   9:..//kernel/core/tos_barrier.c ****  * If you have downloaded a copy of the TencentOS source code from Tencent,
  10:..//kernel/core/tos_barrier.c ****  * please note that TencentOS source code is licensed under the BSD 3-Clause
  11:..//kernel/core/tos_barrier.c ****  * License, except for the third-party components listed below which are
  12:..//kernel/core/tos_barrier.c ****  * subject to different license terms. Your integration of TencentOS into your
  13:..//kernel/core/tos_barrier.c ****  * own projects may require compliance with the BSD 3-Clause License, as well
  14:..//kernel/core/tos_barrier.c ****  * as the other licenses applicable to the third-party components included
  15:..//kernel/core/tos_barrier.c ****  * within TencentOS.
  16:..//kernel/core/tos_barrier.c ****  *---------------------------------------------------------------------------*/
  17:..//kernel/core/tos_barrier.c **** 
  18:..//kernel/core/tos_barrier.c **** #include "tos_k.h"
  19:..//kernel/core/tos_barrier.c **** 
  20:..//kernel/core/tos_barrier.c **** __API__ k_err_t tos_barrier_create(k_barrier_t *barrier, k_barrier_cnt_t count)
  21:..//kernel/core/tos_barrier.c **** {
  28              		.loc 1 21 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  22:..//kernel/core/tos_barrier.c ****     TOS_PTR_SANITY_CHECK(barrier);
  32              		.loc 1 22 5 view .LVU1
  33              		.loc 1 22 5 view .LVU2
  34 0000 58B1     		cbz	r0, .L3
  21:..//kernel/core/tos_barrier.c ****     TOS_PTR_SANITY_CHECK(barrier);
  35              		.loc 1 21 1 is_stmt 0 view .LVU3
ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 2


  36 0002 10B5     		push	{r4, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 4, -8
  40              		.cfi_offset 14, -4
  41 0004 0446     		mov	r4, r0
  23:..//kernel/core/tos_barrier.c **** 
  24:..//kernel/core/tos_barrier.c ****     if (count == 0u) {
  42              		.loc 1 24 5 is_stmt 1 view .LVU4
  43              		.loc 1 24 8 is_stmt 0 view .LVU5
  44 0006 59B1     		cbz	r1, .L4
  25:..//kernel/core/tos_barrier.c ****         return K_ERR_BARRIER_COUNT_INVALID;
  26:..//kernel/core/tos_barrier.c ****     }
  27:..//kernel/core/tos_barrier.c **** 
  28:..//kernel/core/tos_barrier.c ****     barrier->count = count;
  45              		.loc 1 28 5 is_stmt 1 view .LVU6
  46              		.loc 1 28 20 is_stmt 0 view .LVU7
  47 0008 8181     		strh	r1, [r0, #12]	@ movhi
  29:..//kernel/core/tos_barrier.c ****     pend_object_init(&barrier->pend_obj);
  48              		.loc 1 29 5 is_stmt 1 view .LVU8
  49 000a 0430     		adds	r0, r0, #4
  50              	.LVL1:
  51              		.loc 1 29 5 is_stmt 0 view .LVU9
  52 000c FFF7FEFF 		bl	pend_object_init
  53              	.LVL2:
  30:..//kernel/core/tos_barrier.c ****     TOS_OBJ_INIT(barrier, KNL_OBJ_TYPE_BARRIER);
  54              		.loc 1 30 5 is_stmt 1 view .LVU10
  55              	.LBB12:
  56              	.LBI12:
  57              		.file 2 "..//kernel/core/include/tos_sys.h"
   1:..//kernel/core/include/tos_sys.h **** /*----------------------------------------------------------------------------
   2:..//kernel/core/include/tos_sys.h ****  * Tencent is pleased to support the open source community by making TencentOS
   3:..//kernel/core/include/tos_sys.h ****  * available.
   4:..//kernel/core/include/tos_sys.h ****  *
   5:..//kernel/core/include/tos_sys.h ****  * Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
   6:..//kernel/core/include/tos_sys.h ****  * If you have downloaded a copy of the TencentOS binary from Tencent, please
   7:..//kernel/core/include/tos_sys.h ****  * note that the TencentOS binary is licensed under the BSD 3-Clause License.
   8:..//kernel/core/include/tos_sys.h ****  *
   9:..//kernel/core/include/tos_sys.h ****  * If you have downloaded a copy of the TencentOS source code from Tencent,
  10:..//kernel/core/include/tos_sys.h ****  * please note that TencentOS source code is licensed under the BSD 3-Clause
  11:..//kernel/core/include/tos_sys.h ****  * License, except for the third-party components listed below which are
  12:..//kernel/core/include/tos_sys.h ****  * subject to different license terms. Your integration of TencentOS into your
  13:..//kernel/core/include/tos_sys.h ****  * own projects may require compliance with the BSD 3-Clause License, as well
  14:..//kernel/core/include/tos_sys.h ****  * as the other licenses applicable to the third-party components included
  15:..//kernel/core/include/tos_sys.h ****  * within TencentOS.
  16:..//kernel/core/include/tos_sys.h ****  *---------------------------------------------------------------------------*/
  17:..//kernel/core/include/tos_sys.h **** 
  18:..//kernel/core/include/tos_sys.h **** #ifndef _TOS_SYS_H_
  19:..//kernel/core/include/tos_sys.h **** #define  _TOS_SYS_H_
  20:..//kernel/core/include/tos_sys.h **** 
  21:..//kernel/core/include/tos_sys.h **** __CDECLS_BEGIN
  22:..//kernel/core/include/tos_sys.h **** 
  23:..//kernel/core/include/tos_sys.h **** #define K_NESTING_LIMIT_IRQ             (k_nesting_t)250u
  24:..//kernel/core/include/tos_sys.h **** #define K_NESTING_LIMIT_SCHED_LOCK      (k_nesting_t)250u
  25:..//kernel/core/include/tos_sys.h **** 
  26:..//kernel/core/include/tos_sys.h **** typedef enum knl_state_en {
  27:..//kernel/core/include/tos_sys.h ****     KNL_STATE_STOPPED,
ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 3


  28:..//kernel/core/include/tos_sys.h ****     KNL_STATE_RUNNING,
  29:..//kernel/core/include/tos_sys.h **** } knl_state_t;
  30:..//kernel/core/include/tos_sys.h **** 
  31:..//kernel/core/include/tos_sys.h **** // some kind of magic number, mainly for identifing whether the object is initialized, or whether u
  32:..//kernel/core/include/tos_sys.h **** typedef enum knl_obj_type_en {
  33:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_NONE                           = 0x0000,
  34:..//kernel/core/include/tos_sys.h **** 
  35:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_BINARY_HEAP                    = 0xDAD0,
  36:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_BITMAP                         = 0xDAD1,
  37:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_CHAR_FIFO                      = 0xDAD2,
  38:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_MMBLK_POOL                     = 0xDAD3,
  39:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_MSG_QUEUE                      = 0xDAD4,
  40:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_PRIORITY_QUEUE                 = 0xDAD5,
  41:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_RING_QUEUE                     = 0xDAD6,
  42:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_STOPWATCH                      = 0xDAD7,
  43:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_TASK                           = 0xDAD8,
  44:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_TIMER                          = 0xDAD9,
  45:..//kernel/core/include/tos_sys.h **** 
  46:..//kernel/core/include/tos_sys.h ****     // ipc object
  47:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_BARRIER                        = 0x0BEE,
  48:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_COMPLETION                     = 0x1BEE,
  49:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_COUNTDOWNLATCH                 = 0x2BEE,
  50:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_EVENT                          = 0x3BEE,
  51:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_MAIL_QUEUE                     = 0x4BEE,
  52:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_MESSAGE_QUEUE                  = 0x5BEE,
  53:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_MUTEX                          = 0x6BEE,
  54:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_PRIORITY_MAIL_QUEUE            = 0x7BEE,
  55:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_PRIORITY_MESSAGE_QUEUE         = 0x8BEE,
  56:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_RWLOCK                         = 0x9BEE,
  57:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_TYPE_SEMAPHORE                      = 0xABEE,
  58:..//kernel/core/include/tos_sys.h **** } knl_obj_type_t;
  59:..//kernel/core/include/tos_sys.h **** 
  60:..//kernel/core/include/tos_sys.h **** typedef enum knl_obj_alloc_type_en {
  61:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_ALLOC_TYPE_NONE,
  62:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_ALLOC_TYPE_STATIC,
  63:..//kernel/core/include/tos_sys.h ****     KNL_OBJ_ALLOC_TYPE_DYNAMIC,
  64:..//kernel/core/include/tos_sys.h **** } knl_obj_alloc_type_t;
  65:..//kernel/core/include/tos_sys.h **** 
  66:..//kernel/core/include/tos_sys.h **** typedef struct knl_object_st {
  67:..//kernel/core/include/tos_sys.h ****     knl_obj_alloc_type_t    alloc_type; /* is dynamic allocated(using tos_mmheap) or static memory?
  68:..//kernel/core/include/tos_sys.h **** #if TOS_CFG_OBJECT_VERIFY_EN > 0u
  69:..//kernel/core/include/tos_sys.h ****     knl_obj_type_t          type;
  70:..//kernel/core/include/tos_sys.h **** #endif
  71:..//kernel/core/include/tos_sys.h **** } knl_obj_t;
  72:..//kernel/core/include/tos_sys.h **** 
  73:..//kernel/core/include/tos_sys.h **** /**
  74:..//kernel/core/include/tos_sys.h ****  * @brief Initialize the kernel.
  75:..//kernel/core/include/tos_sys.h ****  * initialize the tos tiny kernel.
  76:..//kernel/core/include/tos_sys.h ****  *
  77:..//kernel/core/include/tos_sys.h ****  * @attention None
  78:..//kernel/core/include/tos_sys.h ****  *
  79:..//kernel/core/include/tos_sys.h ****  * @param   None
  80:..//kernel/core/include/tos_sys.h ****  *
  81:..//kernel/core/include/tos_sys.h ****  * @return  errcode
  82:..//kernel/core/include/tos_sys.h ****  * @retval  Non-#K_ERR_NONE               return failed.
  83:..//kernel/core/include/tos_sys.h ****  * @retval  #K_ERR_NONE                   return successfully.
  84:..//kernel/core/include/tos_sys.h ****  */
ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 4


  85:..//kernel/core/include/tos_sys.h **** __API__ k_err_t tos_knl_init(void);
  86:..//kernel/core/include/tos_sys.h **** 
  87:..//kernel/core/include/tos_sys.h **** /**
  88:..//kernel/core/include/tos_sys.h ****  * @brief Start the kernel.
  89:..//kernel/core/include/tos_sys.h ****  * get the kernel start to run, which means start the multitask scheduling.
  90:..//kernel/core/include/tos_sys.h ****  *
  91:..//kernel/core/include/tos_sys.h ****  * @attention None
  92:..//kernel/core/include/tos_sys.h ****  *
  93:..//kernel/core/include/tos_sys.h ****  * @param   None
  94:..//kernel/core/include/tos_sys.h ****  *
  95:..//kernel/core/include/tos_sys.h ****  * @return  errcode
  96:..//kernel/core/include/tos_sys.h ****  * @retval  #K_ERR_KNL_RUNNING            the kernel is already running.
  97:..//kernel/core/include/tos_sys.h ****  * @retval  #K_ERR_NONE                   return successfully.
  98:..//kernel/core/include/tos_sys.h ****  */
  99:..//kernel/core/include/tos_sys.h **** __API__ k_err_t tos_knl_start(void);
 100:..//kernel/core/include/tos_sys.h **** 
 101:..//kernel/core/include/tos_sys.h **** /**
 102:..//kernel/core/include/tos_sys.h ****  * @brief Get the kernel state.
 103:..//kernel/core/include/tos_sys.h ****  * whether the kernel is running.
 104:..//kernel/core/include/tos_sys.h ****  *
 105:..//kernel/core/include/tos_sys.h ****  * @attention None
 106:..//kernel/core/include/tos_sys.h ****  *
 107:..//kernel/core/include/tos_sys.h ****  * @param   None
 108:..//kernel/core/include/tos_sys.h ****  *
 109:..//kernel/core/include/tos_sys.h ****  * @return  whether the kernel is running.
 110:..//kernel/core/include/tos_sys.h ****  * @retval  Non-0                           the kernel is running.
 111:..//kernel/core/include/tos_sys.h ****  * @retval  0                               the kernel is not running.
 112:..//kernel/core/include/tos_sys.h ****  */
 113:..//kernel/core/include/tos_sys.h **** __API__ int     tos_knl_is_running(void);
 114:..//kernel/core/include/tos_sys.h **** 
 115:..//kernel/core/include/tos_sys.h **** /**
 116:..//kernel/core/include/tos_sys.h ****  * @brief Kernel enter the interrupt.
 117:..//kernel/core/include/tos_sys.h ****  * this function should be called in the entrance of a interrupt handler.
 118:..//kernel/core/include/tos_sys.h ****  *
 119:..//kernel/core/include/tos_sys.h ****  * @attention None
 120:..//kernel/core/include/tos_sys.h ****  *
 121:..//kernel/core/include/tos_sys.h ****  * @param   None
 122:..//kernel/core/include/tos_sys.h ****  *
 123:..//kernel/core/include/tos_sys.h ****  * @return  None
 124:..//kernel/core/include/tos_sys.h ****  */
 125:..//kernel/core/include/tos_sys.h **** __API__ void    tos_knl_irq_enter(void);
 126:..//kernel/core/include/tos_sys.h **** 
 127:..//kernel/core/include/tos_sys.h **** /**
 128:..//kernel/core/include/tos_sys.h ****  * @brief Kernel exit the interrupt.
 129:..//kernel/core/include/tos_sys.h ****  * this function should be called in the exit of a interrupt handler.
 130:..//kernel/core/include/tos_sys.h ****  *
 131:..//kernel/core/include/tos_sys.h ****  * @attention None
 132:..//kernel/core/include/tos_sys.h ****  *
 133:..//kernel/core/include/tos_sys.h ****  * @param   None
 134:..//kernel/core/include/tos_sys.h ****  *
 135:..//kernel/core/include/tos_sys.h ****  * @return  None
 136:..//kernel/core/include/tos_sys.h ****  */
 137:..//kernel/core/include/tos_sys.h **** __API__ void    tos_knl_irq_leave(void);
 138:..//kernel/core/include/tos_sys.h **** 
 139:..//kernel/core/include/tos_sys.h **** /**
 140:..//kernel/core/include/tos_sys.h ****  * @brief Lock the scheduler.
 141:..//kernel/core/include/tos_sys.h ****  * prevent the kernel from performing task schedule.
ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 5


 142:..//kernel/core/include/tos_sys.h ****  *
 143:..//kernel/core/include/tos_sys.h ****  * @attention None
 144:..//kernel/core/include/tos_sys.h ****  *
 145:..//kernel/core/include/tos_sys.h ****  * @param   None
 146:..//kernel/core/include/tos_sys.h ****  *
 147:..//kernel/core/include/tos_sys.h ****  * @return  errcode
 148:..//kernel/core/include/tos_sys.h ****  * @retval  K_ERR_KNL_NOT_RUNNING         the kernel is not running.
 149:..//kernel/core/include/tos_sys.h ****  * @retval  K_ERR_LOCK_NESTING_OVERFLOW   the schedule lock nesting is overflow.
 150:..//kernel/core/include/tos_sys.h ****  * @retval  K_ERR_NONE                    return successfully.
 151:..//kernel/core/include/tos_sys.h ****  */
 152:..//kernel/core/include/tos_sys.h **** __API__ k_err_t tos_knl_sched_lock(void);
 153:..//kernel/core/include/tos_sys.h **** 
 154:..//kernel/core/include/tos_sys.h **** /**
 155:..//kernel/core/include/tos_sys.h ****  * @brief Unlock the scheduler.
 156:..//kernel/core/include/tos_sys.h ****  * re-enable the task schedule.
 157:..//kernel/core/include/tos_sys.h ****  *
 158:..//kernel/core/include/tos_sys.h ****  * @attention None
 159:..//kernel/core/include/tos_sys.h ****  *
 160:..//kernel/core/include/tos_sys.h ****  * @param   None
 161:..//kernel/core/include/tos_sys.h ****  *
 162:..//kernel/core/include/tos_sys.h ****  * @return  errcode
 163:..//kernel/core/include/tos_sys.h ****  * @retval  K_ERR_KNL_NOT_RUNNING         the kernel is not running.
 164:..//kernel/core/include/tos_sys.h ****  * @retval  K_ERR_SCHED_NOT_LOCKED        the scheduler is not locked.
 165:..//kernel/core/include/tos_sys.h ****  * @retval  K_ERR_NONE                    return successfully.
 166:..//kernel/core/include/tos_sys.h ****  */
 167:..//kernel/core/include/tos_sys.h **** __API__ k_err_t tos_knl_sched_unlock(void);
 168:..//kernel/core/include/tos_sys.h **** 
 169:..//kernel/core/include/tos_sys.h **** #if TOS_CFG_TICKLESS_EN > 0u
 170:..//kernel/core/include/tos_sys.h **** __KNL__ k_tick_t knl_next_expires_get(void);
 171:..//kernel/core/include/tos_sys.h **** #endif
 172:..//kernel/core/include/tos_sys.h **** 
 173:..//kernel/core/include/tos_sys.h **** __KNL__ void    knl_sched(void);
 174:..//kernel/core/include/tos_sys.h **** __KNL__ int     knl_is_sched_locked(void);
 175:..//kernel/core/include/tos_sys.h **** __KNL__ int     knl_is_inirq(void);
 176:..//kernel/core/include/tos_sys.h **** __KNL__ int     knl_is_idle(k_task_t *task);
 177:..//kernel/core/include/tos_sys.h **** __KNL__ int     knl_is_self(k_task_t *task);
 178:..//kernel/core/include/tos_sys.h **** __KNL__ k_err_t knl_idle_init(void);
 179:..//kernel/core/include/tos_sys.h **** 
 180:..//kernel/core/include/tos_sys.h **** #if TOS_CFG_OBJECT_VERIFY_EN > 0u
 181:..//kernel/core/include/tos_sys.h **** 
 182:..//kernel/core/include/tos_sys.h **** __KNL__ __STATIC_INLINE__ int knl_object_verify(knl_obj_t *knl_obj, knl_obj_type_t type)
 183:..//kernel/core/include/tos_sys.h **** {
 184:..//kernel/core/include/tos_sys.h ****     return knl_obj->type == type;
 185:..//kernel/core/include/tos_sys.h **** }
 186:..//kernel/core/include/tos_sys.h **** 
 187:..//kernel/core/include/tos_sys.h **** __KNL__ __STATIC_INLINE__ void knl_object_init(knl_obj_t *knl_obj, knl_obj_type_t type)
  58              		.loc 2 187 32 view .LVU11
  59              	.LBB13:
 188:..//kernel/core/include/tos_sys.h **** {
 189:..//kernel/core/include/tos_sys.h ****     knl_obj->type = type;
  60              		.loc 2 189 5 view .LVU12
  61              		.loc 2 189 19 is_stmt 0 view .LVU13
  62 0010 40F6EE33 		movw	r3, #3054
  63 0014 6380     		strh	r3, [r4, #2]	@ movhi
  64              	.LVL3:
  65              		.loc 2 189 19 view .LVU14
  66              	.LBE13:
ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 6


  67              	.LBE12:
  31:..//kernel/core/tos_barrier.c **** 
  32:..//kernel/core/tos_barrier.c ****     return K_ERR_NONE;
  68              		.loc 1 32 5 is_stmt 1 view .LVU15
  69              		.loc 1 32 12 is_stmt 0 view .LVU16
  70 0016 0020     		movs	r0, #0
  71              	.L2:
  33:..//kernel/core/tos_barrier.c **** }
  72              		.loc 1 33 1 view .LVU17
  73 0018 10BD     		pop	{r4, pc}
  74              	.LVL4:
  75              	.L3:
  76              	.LCFI1:
  77              		.cfi_def_cfa_offset 0
  78              		.cfi_restore 4
  79              		.cfi_restore 14
  22:..//kernel/core/tos_barrier.c **** 
  80              		.loc 1 22 5 view .LVU18
  81 001a 40F24C40 		movw	r0, #1100
  82              	.LVL5:
  83              		.loc 1 33 1 view .LVU19
  84 001e 7047     		bx	lr
  85              	.LVL6:
  86              	.L4:
  87              	.LCFI2:
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 4, -8
  90              		.cfi_offset 14, -4
  25:..//kernel/core/tos_barrier.c ****     }
  91              		.loc 1 25 16 view .LVU20
  92 0020 0520     		movs	r0, #5
  93              	.LVL7:
  25:..//kernel/core/tos_barrier.c ****     }
  94              		.loc 1 25 16 view .LVU21
  95 0022 F9E7     		b	.L2
  96              		.cfi_endproc
  97              	.LFE110:
  99              		.section	.text.tos_barrier_destroy,"ax",%progbits
 100              		.align	1
 101              		.global	tos_barrier_destroy
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 105              		.fpu softvfp
 107              	tos_barrier_destroy:
 108              	.LVL8:
 109              	.LFB111:
  34:..//kernel/core/tos_barrier.c **** 
  35:..//kernel/core/tos_barrier.c **** __API__ k_err_t tos_barrier_destroy(k_barrier_t *barrier)
  36:..//kernel/core/tos_barrier.c **** {
 110              		.loc 1 36 1 is_stmt 1 view -0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
  37:..//kernel/core/tos_barrier.c ****     TOS_CPU_CPSR_ALLOC();
 114              		.loc 1 37 5 view .LVU23
  38:..//kernel/core/tos_barrier.c **** 
ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 7


  39:..//kernel/core/tos_barrier.c ****     TOS_PTR_SANITY_CHECK(barrier);
 115              		.loc 1 39 5 view .LVU24
 116              		.loc 1 39 5 view .LVU25
 117 0000 E8B1     		cbz	r0, .L11
  36:..//kernel/core/tos_barrier.c ****     TOS_CPU_CPSR_ALLOC();
 118              		.loc 1 36 1 is_stmt 0 view .LVU26
 119 0002 70B5     		push	{r4, r5, r6, lr}
 120              	.LCFI3:
 121              		.cfi_def_cfa_offset 16
 122              		.cfi_offset 4, -16
 123              		.cfi_offset 5, -12
 124              		.cfi_offset 6, -8
 125              		.cfi_offset 14, -4
 126 0004 0446     		mov	r4, r0
  40:..//kernel/core/tos_barrier.c ****     TOS_OBJ_VERIFY(barrier, KNL_OBJ_TYPE_BARRIER);
 127              		.loc 1 40 5 is_stmt 1 view .LVU27
 128              		.loc 1 40 5 view .LVU28
 129              	.LVL9:
 130              	.LBB14:
 131              	.LBI14:
 182:..//kernel/core/include/tos_sys.h **** {
 132              		.loc 2 182 31 view .LVU29
 133              	.LBB15:
 184:..//kernel/core/include/tos_sys.h **** }
 134              		.loc 2 184 5 view .LVU30
 184:..//kernel/core/include/tos_sys.h **** }
 135              		.loc 2 184 19 is_stmt 0 view .LVU31
 136 0006 4188     		ldrh	r1, [r0, #2]
 137              	.LVL10:
 184:..//kernel/core/include/tos_sys.h **** }
 138              		.loc 2 184 19 view .LVU32
 139              	.LBE15:
 140              	.LBE14:
 141              		.loc 1 40 5 view .LVU33
 142 0008 40F6EE32 		movw	r2, #3054
 143 000c 9142     		cmp	r1, r2
 144 000e 02D0     		beq	.L17
 145 0010 40F24D40 		movw	r0, #1101
 146              	.LVL11:
 147              	.L10:
  41:..//kernel/core/tos_barrier.c **** 
  42:..//kernel/core/tos_barrier.c ****     TOS_CPU_INT_DISABLE();
  43:..//kernel/core/tos_barrier.c **** 
  44:..//kernel/core/tos_barrier.c ****     pend_wakeup_all(&barrier->pend_obj, PEND_STATE_DESTROY);
  45:..//kernel/core/tos_barrier.c **** 
  46:..//kernel/core/tos_barrier.c ****     pend_object_deinit(&barrier->pend_obj);
  47:..//kernel/core/tos_barrier.c **** 
  48:..//kernel/core/tos_barrier.c ****     TOS_OBJ_DEINIT(barrier);
  49:..//kernel/core/tos_barrier.c **** 
  50:..//kernel/core/tos_barrier.c ****     TOS_CPU_INT_ENABLE();
  51:..//kernel/core/tos_barrier.c ****     knl_sched();
  52:..//kernel/core/tos_barrier.c **** 
  53:..//kernel/core/tos_barrier.c ****     return K_ERR_NONE;
  54:..//kernel/core/tos_barrier.c **** }
 148              		.loc 1 54 1 view .LVU34
 149 0014 70BD     		pop	{r4, r5, r6, pc}
 150              	.LVL12:
ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 8


 151              	.L17:
  42:..//kernel/core/tos_barrier.c **** 
 152              		.loc 1 42 5 is_stmt 1 view .LVU35
  42:..//kernel/core/tos_barrier.c **** 
 153              		.loc 1 42 5 view .LVU36
 154 0016 FFF7FEFF 		bl	tos_cpu_cpsr_save
 155              	.LVL13:
  42:..//kernel/core/tos_barrier.c **** 
 156              		.loc 1 42 5 is_stmt 0 view .LVU37
 157 001a 0646     		mov	r6, r0
 158              	.LVL14:
  44:..//kernel/core/tos_barrier.c **** 
 159              		.loc 1 44 5 is_stmt 1 view .LVU38
 160 001c 251D     		adds	r5, r4, #4
 161 001e 0321     		movs	r1, #3
 162 0020 2846     		mov	r0, r5
 163              	.LVL15:
  44:..//kernel/core/tos_barrier.c **** 
 164              		.loc 1 44 5 is_stmt 0 view .LVU39
 165 0022 FFF7FEFF 		bl	pend_wakeup_all
 166              	.LVL16:
  46:..//kernel/core/tos_barrier.c **** 
 167              		.loc 1 46 5 is_stmt 1 view .LVU40
 168 0026 2846     		mov	r0, r5
 169 0028 FFF7FEFF 		bl	pend_object_deinit
 170              	.LVL17:
  48:..//kernel/core/tos_barrier.c **** 
 171              		.loc 1 48 5 view .LVU41
 172              	.LBB16:
 173              	.LBI16:
 190:..//kernel/core/include/tos_sys.h **** }
 191:..//kernel/core/include/tos_sys.h **** 
 192:..//kernel/core/include/tos_sys.h **** __KNL__ __STATIC_INLINE__ void knl_object_deinit(knl_obj_t *knl_obj)
 174              		.loc 2 192 32 view .LVU42
 175              	.LBB17:
 193:..//kernel/core/include/tos_sys.h **** {
 194:..//kernel/core/include/tos_sys.h ****     knl_obj->type = KNL_OBJ_TYPE_NONE;
 176              		.loc 2 194 5 view .LVU43
 177              		.loc 2 194 19 is_stmt 0 view .LVU44
 178 002c 0025     		movs	r5, #0
 179 002e 6580     		strh	r5, [r4, #2]	@ movhi
 180              	.LVL18:
 181              		.loc 2 194 19 view .LVU45
 182              	.LBE17:
 183              	.LBE16:
  50:..//kernel/core/tos_barrier.c ****     knl_sched();
 184              		.loc 1 50 5 is_stmt 1 view .LVU46
  50:..//kernel/core/tos_barrier.c ****     knl_sched();
 185              		.loc 1 50 5 view .LVU47
 186 0030 3046     		mov	r0, r6
 187 0032 FFF7FEFF 		bl	tos_cpu_cpsr_restore
 188              	.LVL19:
  51:..//kernel/core/tos_barrier.c **** 
 189              		.loc 1 51 5 view .LVU48
 190 0036 FFF7FEFF 		bl	knl_sched
 191              	.LVL20:
  53:..//kernel/core/tos_barrier.c **** }
ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 9


 192              		.loc 1 53 5 view .LVU49
  53:..//kernel/core/tos_barrier.c **** }
 193              		.loc 1 53 12 is_stmt 0 view .LVU50
 194 003a 2846     		mov	r0, r5
 195 003c EAE7     		b	.L10
 196              	.LVL21:
 197              	.L11:
 198              	.LCFI4:
 199              		.cfi_def_cfa_offset 0
 200              		.cfi_restore 4
 201              		.cfi_restore 5
 202              		.cfi_restore 6
 203              		.cfi_restore 14
  39:..//kernel/core/tos_barrier.c ****     TOS_OBJ_VERIFY(barrier, KNL_OBJ_TYPE_BARRIER);
 204              		.loc 1 39 5 view .LVU51
 205 003e 40F24C40 		movw	r0, #1100
 206              	.LVL22:
 207              		.loc 1 54 1 view .LVU52
 208 0042 7047     		bx	lr
 209              		.cfi_endproc
 210              	.LFE111:
 212              		.section	.text.tos_barrier_pend,"ax",%progbits
 213              		.align	1
 214              		.global	tos_barrier_pend
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu softvfp
 220              	tos_barrier_pend:
 221              	.LVL23:
 222              	.LFB112:
  55:..//kernel/core/tos_barrier.c **** 
  56:..//kernel/core/tos_barrier.c **** __API__ k_err_t tos_barrier_pend(k_barrier_t *barrier)
  57:..//kernel/core/tos_barrier.c **** {
 223              		.loc 1 57 1 is_stmt 1 view -0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		.loc 1 57 1 is_stmt 0 view .LVU54
 228 0000 70B5     		push	{r4, r5, r6, lr}
 229              	.LCFI5:
 230              		.cfi_def_cfa_offset 16
 231              		.cfi_offset 4, -16
 232              		.cfi_offset 5, -12
 233              		.cfi_offset 6, -8
 234              		.cfi_offset 14, -4
 235 0002 0446     		mov	r4, r0
  58:..//kernel/core/tos_barrier.c ****     TOS_CPU_CPSR_ALLOC();
 236              		.loc 1 58 5 is_stmt 1 view .LVU55
 237              	.LVL24:
  59:..//kernel/core/tos_barrier.c **** 
  60:..//kernel/core/tos_barrier.c ****     TOS_IN_IRQ_CHECK();
 238              		.loc 1 60 5 view .LVU56
 239              		.loc 1 60 5 view .LVU57
 240 0004 FFF7FEFF 		bl	knl_is_inirq
 241              	.LVL25:
 242              		.loc 1 60 5 is_stmt 0 view .LVU58
ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 10


 243 0008 0028     		cmp	r0, #0
 244 000a 3FD1     		bne	.L23
  61:..//kernel/core/tos_barrier.c ****     TOS_PTR_SANITY_CHECK(barrier);
 245              		.loc 1 61 5 is_stmt 1 view .LVU59
 246              		.loc 1 61 5 view .LVU60
 247 000c 002C     		cmp	r4, #0
 248 000e 40D0     		beq	.L24
  62:..//kernel/core/tos_barrier.c ****     TOS_OBJ_VERIFY(barrier, KNL_OBJ_TYPE_BARRIER);
 249              		.loc 1 62 5 view .LVU61
 250              		.loc 1 62 5 view .LVU62
 251              	.LVL26:
 252              	.LBB18:
 253              	.LBI18:
 182:..//kernel/core/include/tos_sys.h **** {
 254              		.loc 2 182 31 view .LVU63
 255              	.LBB19:
 184:..//kernel/core/include/tos_sys.h **** }
 256              		.loc 2 184 5 view .LVU64
 184:..//kernel/core/include/tos_sys.h **** }
 257              		.loc 2 184 19 is_stmt 0 view .LVU65
 258 0010 6288     		ldrh	r2, [r4, #2]
 259              	.LVL27:
 184:..//kernel/core/include/tos_sys.h **** }
 260              		.loc 2 184 19 view .LVU66
 261              	.LBE19:
 262              	.LBE18:
 263              		.loc 1 62 5 view .LVU67
 264 0012 40F6EE33 		movw	r3, #3054
 265 0016 9A42     		cmp	r2, r3
 266 0018 02D0     		beq	.L27
 267 001a 40F24D40 		movw	r0, #1101
 268              	.LVL28:
 269              	.L19:
  63:..//kernel/core/tos_barrier.c **** 
  64:..//kernel/core/tos_barrier.c ****     TOS_CPU_INT_DISABLE();
  65:..//kernel/core/tos_barrier.c **** 
  66:..//kernel/core/tos_barrier.c ****     if (barrier->count == 0u) {
  67:..//kernel/core/tos_barrier.c ****         TOS_CPU_INT_ENABLE();
  68:..//kernel/core/tos_barrier.c ****         return K_ERR_BARRIER_OVERFLOW;
  69:..//kernel/core/tos_barrier.c ****     }
  70:..//kernel/core/tos_barrier.c **** 
  71:..//kernel/core/tos_barrier.c ****     if (barrier->count == (k_barrier_cnt_t)1u) {
  72:..//kernel/core/tos_barrier.c ****         barrier->count = (k_barrier_cnt_t)0u;
  73:..//kernel/core/tos_barrier.c ****         pend_wakeup_all(&barrier->pend_obj, PEND_STATE_POST);
  74:..//kernel/core/tos_barrier.c **** 
  75:..//kernel/core/tos_barrier.c ****         TOS_CPU_INT_ENABLE();
  76:..//kernel/core/tos_barrier.c ****         return K_ERR_NONE;
  77:..//kernel/core/tos_barrier.c ****     }
  78:..//kernel/core/tos_barrier.c **** 
  79:..//kernel/core/tos_barrier.c ****     if (knl_is_sched_locked()) {
  80:..//kernel/core/tos_barrier.c ****         TOS_CPU_INT_ENABLE();
  81:..//kernel/core/tos_barrier.c ****         return K_ERR_PEND_SCHED_LOCKED;
  82:..//kernel/core/tos_barrier.c ****     }
  83:..//kernel/core/tos_barrier.c **** 
  84:..//kernel/core/tos_barrier.c ****     --barrier->count;
  85:..//kernel/core/tos_barrier.c ****     pend_task_block(k_curr_task, &barrier->pend_obj, TOS_TIME_FOREVER);
  86:..//kernel/core/tos_barrier.c **** 
ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 11


  87:..//kernel/core/tos_barrier.c ****     TOS_CPU_INT_ENABLE();
  88:..//kernel/core/tos_barrier.c ****     knl_sched();
  89:..//kernel/core/tos_barrier.c **** 
  90:..//kernel/core/tos_barrier.c ****     return pend_state2errno(k_curr_task->pend_state);
  91:..//kernel/core/tos_barrier.c **** }
 270              		.loc 1 91 1 view .LVU68
 271 001e 70BD     		pop	{r4, r5, r6, pc}
 272              	.LVL29:
 273              	.L27:
  64:..//kernel/core/tos_barrier.c **** 
 274              		.loc 1 64 5 is_stmt 1 view .LVU69
  64:..//kernel/core/tos_barrier.c **** 
 275              		.loc 1 64 5 view .LVU70
 276 0020 FFF7FEFF 		bl	tos_cpu_cpsr_save
 277              	.LVL30:
 278 0024 0646     		mov	r6, r0
 279              	.LVL31:
  66:..//kernel/core/tos_barrier.c ****         TOS_CPU_INT_ENABLE();
 280              		.loc 1 66 5 view .LVU71
  66:..//kernel/core/tos_barrier.c ****         TOS_CPU_INT_ENABLE();
 281              		.loc 1 66 16 is_stmt 0 view .LVU72
 282 0026 A389     		ldrh	r3, [r4, #12]
  66:..//kernel/core/tos_barrier.c ****         TOS_CPU_INT_ENABLE();
 283              		.loc 1 66 8 view .LVU73
 284 0028 DBB1     		cbz	r3, .L28
  71:..//kernel/core/tos_barrier.c ****         barrier->count = (k_barrier_cnt_t)0u;
 285              		.loc 1 71 5 is_stmt 1 view .LVU74
  71:..//kernel/core/tos_barrier.c ****         barrier->count = (k_barrier_cnt_t)0u;
 286              		.loc 1 71 8 is_stmt 0 view .LVU75
 287 002a 012B     		cmp	r3, #1
 288 002c 1DD0     		beq	.L29
  79:..//kernel/core/tos_barrier.c ****         TOS_CPU_INT_ENABLE();
 289              		.loc 1 79 5 is_stmt 1 view .LVU76
  79:..//kernel/core/tos_barrier.c ****         TOS_CPU_INT_ENABLE();
 290              		.loc 1 79 9 is_stmt 0 view .LVU77
 291 002e FFF7FEFF 		bl	knl_is_sched_locked
 292              	.LVL32:
  79:..//kernel/core/tos_barrier.c ****         TOS_CPU_INT_ENABLE();
 293              		.loc 1 79 8 view .LVU78
 294 0032 28BB     		cbnz	r0, .L30
  84:..//kernel/core/tos_barrier.c ****     pend_task_block(k_curr_task, &barrier->pend_obj, TOS_TIME_FOREVER);
 295              		.loc 1 84 5 is_stmt 1 view .LVU79
  84:..//kernel/core/tos_barrier.c ****     pend_task_block(k_curr_task, &barrier->pend_obj, TOS_TIME_FOREVER);
 296              		.loc 1 84 14 is_stmt 0 view .LVU80
 297 0034 A389     		ldrh	r3, [r4, #12]
  84:..//kernel/core/tos_barrier.c ****     pend_task_block(k_curr_task, &barrier->pend_obj, TOS_TIME_FOREVER);
 298              		.loc 1 84 5 view .LVU81
 299 0036 013B     		subs	r3, r3, #1
 300 0038 A381     		strh	r3, [r4, #12]	@ movhi
  85:..//kernel/core/tos_barrier.c **** 
 301              		.loc 1 85 5 is_stmt 1 view .LVU82
 302 003a 174D     		ldr	r5, .L31
 303 003c 4FF0FF32 		mov	r2, #-1
 304 0040 4FF0FF33 		mov	r3, #-1
 305 0044 211D     		adds	r1, r4, #4
 306 0046 2868     		ldr	r0, [r5]
 307 0048 FFF7FEFF 		bl	pend_task_block
ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 12


 308              	.LVL33:
  87:..//kernel/core/tos_barrier.c ****     knl_sched();
 309              		.loc 1 87 5 view .LVU83
  87:..//kernel/core/tos_barrier.c ****     knl_sched();
 310              		.loc 1 87 5 view .LVU84
 311 004c 3046     		mov	r0, r6
 312 004e FFF7FEFF 		bl	tos_cpu_cpsr_restore
 313              	.LVL34:
  88:..//kernel/core/tos_barrier.c **** 
 314              		.loc 1 88 5 view .LVU85
 315 0052 FFF7FEFF 		bl	knl_sched
 316              	.LVL35:
  90:..//kernel/core/tos_barrier.c **** }
 317              		.loc 1 90 5 view .LVU86
  90:..//kernel/core/tos_barrier.c **** }
 318              		.loc 1 90 40 is_stmt 0 view .LVU87
 319 0056 2B68     		ldr	r3, [r5]
  90:..//kernel/core/tos_barrier.c **** }
 320              		.loc 1 90 12 view .LVU88
 321 0058 93F86800 		ldrb	r0, [r3, #104]	@ zero_extendqisi2
 322 005c FFF7FEFF 		bl	pend_state2errno
 323              	.LVL36:
 324 0060 DDE7     		b	.L19
 325              	.LVL37:
 326              	.L28:
  67:..//kernel/core/tos_barrier.c ****         return K_ERR_BARRIER_OVERFLOW;
 327              		.loc 1 67 9 is_stmt 1 view .LVU89
  67:..//kernel/core/tos_barrier.c ****         return K_ERR_BARRIER_OVERFLOW;
 328              		.loc 1 67 9 view .LVU90
 329 0062 FFF7FEFF 		bl	tos_cpu_cpsr_restore
 330              	.LVL38:
  68:..//kernel/core/tos_barrier.c ****     }
 331              		.loc 1 68 9 view .LVU91
  68:..//kernel/core/tos_barrier.c ****     }
 332              		.loc 1 68 16 is_stmt 0 view .LVU92
 333 0066 0620     		movs	r0, #6
 334 0068 D9E7     		b	.L19
 335              	.LVL39:
 336              	.L29:
  72:..//kernel/core/tos_barrier.c ****         pend_wakeup_all(&barrier->pend_obj, PEND_STATE_POST);
 337              		.loc 1 72 9 is_stmt 1 view .LVU93
  72:..//kernel/core/tos_barrier.c ****         pend_wakeup_all(&barrier->pend_obj, PEND_STATE_POST);
 338              		.loc 1 72 24 is_stmt 0 view .LVU94
 339 006a 0025     		movs	r5, #0
 340 006c A581     		strh	r5, [r4, #12]	@ movhi
  73:..//kernel/core/tos_barrier.c **** 
 341              		.loc 1 73 9 is_stmt 1 view .LVU95
 342 006e 0121     		movs	r1, #1
 343 0070 201D     		adds	r0, r4, #4
 344              	.LVL40:
  73:..//kernel/core/tos_barrier.c **** 
 345              		.loc 1 73 9 is_stmt 0 view .LVU96
 346 0072 FFF7FEFF 		bl	pend_wakeup_all
 347              	.LVL41:
  75:..//kernel/core/tos_barrier.c ****         return K_ERR_NONE;
 348              		.loc 1 75 9 is_stmt 1 view .LVU97
  75:..//kernel/core/tos_barrier.c ****         return K_ERR_NONE;
ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 13


 349              		.loc 1 75 9 view .LVU98
 350 0076 3046     		mov	r0, r6
 351 0078 FFF7FEFF 		bl	tos_cpu_cpsr_restore
 352              	.LVL42:
  76:..//kernel/core/tos_barrier.c ****     }
 353              		.loc 1 76 9 view .LVU99
  76:..//kernel/core/tos_barrier.c ****     }
 354              		.loc 1 76 16 is_stmt 0 view .LVU100
 355 007c 2846     		mov	r0, r5
 356 007e CEE7     		b	.L19
 357              	.L30:
  80:..//kernel/core/tos_barrier.c ****         return K_ERR_PEND_SCHED_LOCKED;
 358              		.loc 1 80 9 is_stmt 1 view .LVU101
  80:..//kernel/core/tos_barrier.c ****         return K_ERR_PEND_SCHED_LOCKED;
 359              		.loc 1 80 9 view .LVU102
 360 0080 3046     		mov	r0, r6
 361 0082 FFF7FEFF 		bl	tos_cpu_cpsr_restore
 362              	.LVL43:
  81:..//kernel/core/tos_barrier.c ****     }
 363              		.loc 1 81 9 view .LVU103
  81:..//kernel/core/tos_barrier.c ****     }
 364              		.loc 1 81 16 is_stmt 0 view .LVU104
 365 0086 40F2B140 		movw	r0, #1201
 366 008a C8E7     		b	.L19
 367              	.LVL44:
 368              	.L23:
  60:..//kernel/core/tos_barrier.c ****     TOS_PTR_SANITY_CHECK(barrier);
 369              		.loc 1 60 5 view .LVU105
 370 008c 4FF4C870 		mov	r0, #400
 371 0090 C5E7     		b	.L19
 372              	.L24:
  61:..//kernel/core/tos_barrier.c ****     TOS_OBJ_VERIFY(barrier, KNL_OBJ_TYPE_BARRIER);
 373              		.loc 1 61 5 view .LVU106
 374 0092 40F24C40 		movw	r0, #1100
 375 0096 C2E7     		b	.L19
 376              	.L32:
 377              		.align	2
 378              	.L31:
 379 0098 00000000 		.word	k_curr_task
 380              		.cfi_endproc
 381              	.LFE112:
 383              		.section	.text.tos_barrier_reset,"ax",%progbits
 384              		.align	1
 385              		.global	tos_barrier_reset
 386              		.syntax unified
 387              		.thumb
 388              		.thumb_func
 389              		.fpu softvfp
 391              	tos_barrier_reset:
 392              	.LVL45:
 393              	.LFB113:
  92:..//kernel/core/tos_barrier.c **** 
  93:..//kernel/core/tos_barrier.c **** __API__ k_err_t tos_barrier_reset(k_barrier_t *barrier, k_barrier_cnt_t count)
  94:..//kernel/core/tos_barrier.c **** {
 394              		.loc 1 94 1 is_stmt 1 view -0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 14


 397              		@ frame_needed = 0, uses_anonymous_args = 0
  95:..//kernel/core/tos_barrier.c ****     TOS_CPU_CPSR_ALLOC();
 398              		.loc 1 95 5 view .LVU108
  96:..//kernel/core/tos_barrier.c **** 
  97:..//kernel/core/tos_barrier.c ****     TOS_PTR_SANITY_CHECK(barrier);
 399              		.loc 1 97 5 view .LVU109
 400              		.loc 1 97 5 view .LVU110
 401 0000 88B1     		cbz	r0, .L35
  94:..//kernel/core/tos_barrier.c ****     TOS_CPU_CPSR_ALLOC();
 402              		.loc 1 94 1 is_stmt 0 view .LVU111
 403 0002 38B5     		push	{r3, r4, r5, lr}
 404              	.LCFI6:
 405              		.cfi_def_cfa_offset 16
 406              		.cfi_offset 3, -16
 407              		.cfi_offset 4, -12
 408              		.cfi_offset 5, -8
 409              		.cfi_offset 14, -4
 410 0004 0446     		mov	r4, r0
  98:..//kernel/core/tos_barrier.c ****     TOS_OBJ_VERIFY(barrier, KNL_OBJ_TYPE_BARRIER);
 411              		.loc 1 98 5 is_stmt 1 view .LVU112
 412              		.loc 1 98 5 view .LVU113
 413              	.LVL46:
 414              	.LBB20:
 415              	.LBI20:
 182:..//kernel/core/include/tos_sys.h **** {
 416              		.loc 2 182 31 view .LVU114
 417              	.LBB21:
 184:..//kernel/core/include/tos_sys.h **** }
 418              		.loc 2 184 5 view .LVU115
 184:..//kernel/core/include/tos_sys.h **** }
 419              		.loc 2 184 19 is_stmt 0 view .LVU116
 420 0006 4088     		ldrh	r0, [r0, #2]
 421              	.LVL47:
 184:..//kernel/core/include/tos_sys.h **** }
 422              		.loc 2 184 19 view .LVU117
 423              	.LBE21:
 424              	.LBE20:
 425              		.loc 1 98 5 view .LVU118
 426 0008 40F6EE32 		movw	r2, #3054
 427 000c 9042     		cmp	r0, r2
 428 000e 02D0     		beq	.L41
 429 0010 40F24D40 		movw	r0, #1101
 430              	.LVL48:
 431              	.L34:
  99:..//kernel/core/tos_barrier.c **** 
 100:..//kernel/core/tos_barrier.c ****     TOS_CPU_INT_DISABLE();
 101:..//kernel/core/tos_barrier.c ****     barrier->count = count;
 102:..//kernel/core/tos_barrier.c ****     TOS_CPU_INT_ENABLE();
 103:..//kernel/core/tos_barrier.c **** 
 104:..//kernel/core/tos_barrier.c ****     return K_ERR_NONE;
 105:..//kernel/core/tos_barrier.c **** }
 432              		.loc 1 105 1 view .LVU119
 433 0014 38BD     		pop	{r3, r4, r5, pc}
 434              	.LVL49:
 435              	.L41:
 436              		.loc 1 105 1 view .LVU120
 437 0016 0D46     		mov	r5, r1
ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 15


 100:..//kernel/core/tos_barrier.c ****     barrier->count = count;
 438              		.loc 1 100 5 is_stmt 1 view .LVU121
 100:..//kernel/core/tos_barrier.c ****     barrier->count = count;
 439              		.loc 1 100 5 view .LVU122
 440 0018 FFF7FEFF 		bl	tos_cpu_cpsr_save
 441              	.LVL50:
 101:..//kernel/core/tos_barrier.c ****     TOS_CPU_INT_ENABLE();
 442              		.loc 1 101 5 view .LVU123
 101:..//kernel/core/tos_barrier.c ****     TOS_CPU_INT_ENABLE();
 443              		.loc 1 101 20 is_stmt 0 view .LVU124
 444 001c A581     		strh	r5, [r4, #12]	@ movhi
 102:..//kernel/core/tos_barrier.c **** 
 445              		.loc 1 102 5 is_stmt 1 view .LVU125
 102:..//kernel/core/tos_barrier.c **** 
 446              		.loc 1 102 5 view .LVU126
 447 001e FFF7FEFF 		bl	tos_cpu_cpsr_restore
 448              	.LVL51:
 104:..//kernel/core/tos_barrier.c **** }
 449              		.loc 1 104 5 view .LVU127
 104:..//kernel/core/tos_barrier.c **** }
 450              		.loc 1 104 12 is_stmt 0 view .LVU128
 451 0022 0020     		movs	r0, #0
 452 0024 F6E7     		b	.L34
 453              	.LVL52:
 454              	.L35:
 455              	.LCFI7:
 456              		.cfi_def_cfa_offset 0
 457              		.cfi_restore 3
 458              		.cfi_restore 4
 459              		.cfi_restore 5
 460              		.cfi_restore 14
  97:..//kernel/core/tos_barrier.c ****     TOS_OBJ_VERIFY(barrier, KNL_OBJ_TYPE_BARRIER);
 461              		.loc 1 97 5 view .LVU129
 462 0026 40F24C40 		movw	r0, #1100
 463              	.LVL53:
 464              		.loc 1 105 1 view .LVU130
 465 002a 7047     		bx	lr
 466              		.cfi_endproc
 467              	.LFE113:
 469              		.text
 470              	.Letext0:
 471              		.file 3 "..//kernel/core/include/tos_kerr.h"
 472              		.file 4 "d:\\arm_gcc\\8 2019-q3-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 473              		.file 5 "d:\\arm_gcc\\8 2019-q3-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 474              		.file 6 "Drivers/CMSIS/Include/core_cm3.h"
 475              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 476              		.file 8 "d:\\arm_gcc\\8 2019-q3-update\\lib\\gcc\\arm-none-eabi\\8.3.1\\include\\stddef.h"
 477              		.file 9 "d:\\arm_gcc\\8 2019-q3-update\\arm-none-eabi\\include\\sys\\_types.h"
 478              		.file 10 "d:\\arm_gcc\\8 2019-q3-update\\arm-none-eabi\\include\\sys\\reent.h"
 479              		.file 11 "d:\\arm_gcc\\8 2019-q3-update\\arm-none-eabi\\include\\sys\\lock.h"
 480              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 481              		.file 13 "..//arch/arm/arm-v7m/common/include/tos_cpu_types.h"
 482              		.file 14 "..//kernel/core/include/tos_ktypes.h"
 483              		.file 15 "..//kernel/core/include/tos_task.h"
 484              		.file 16 "d:\\arm_gcc\\8 2019-q3-update\\arm-none-eabi\\include\\stdlib.h"
 485              		.file 17 "..//kernel/core/include/tos_list.h"
 486              		.file 18 "..//kernel/core/include/tos_pend.h"
ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 16


 487              		.file 19 "..//kernel/core/include/tos_barrier.h"
 488              		.file 20 "..//kernel/core/include/tos_timer.h"
 489              		.file 21 "..//kernel/core/include/tos_mmheap.h"
 490              		.file 22 "..//kernel/core/include/tos_sched.h"
 491              		.file 23 "..//kernel/core/include/tos_global.h"
 492              		.file 24 "..//arch/arm/arm-v7m/common/include/tos_cpu.h"
ARM GAS  C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s 			page 17


DEFINED SYMBOLS
                            *ABS*:00000000 tos_barrier.c
C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s:16     .text.tos_barrier_create:00000000 $t
C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s:24     .text.tos_barrier_create:00000000 tos_barrier_create
C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s:100    .text.tos_barrier_destroy:00000000 $t
C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s:107    .text.tos_barrier_destroy:00000000 tos_barrier_destroy
C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s:213    .text.tos_barrier_pend:00000000 $t
C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s:220    .text.tos_barrier_pend:00000000 tos_barrier_pend
C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s:379    .text.tos_barrier_pend:00000098 $d
C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s:384    .text.tos_barrier_reset:00000000 $t
C:\Users\tianx\AppData\Local\Temp\cchYgRKF.s:391    .text.tos_barrier_reset:00000000 tos_barrier_reset

UNDEFINED SYMBOLS
pend_object_init
tos_cpu_cpsr_save
pend_wakeup_all
pend_object_deinit
tos_cpu_cpsr_restore
knl_sched
knl_is_inirq
knl_is_sched_locked
pend_task_block
pend_state2errno
k_curr_task
