ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"tos_tick.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.tick_task_place,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	tick_task_place:
  24              	.LVL0:
  25              	.LFB110:
  26              		.file 1 "..//kernel/core/tos_tick.c"
   1:..//kernel/core/tos_tick.c **** /*----------------------------------------------------------------------------
   2:..//kernel/core/tos_tick.c ****  * Tencent is pleased to support the open source community by making TencentOS
   3:..//kernel/core/tos_tick.c ****  * available.
   4:..//kernel/core/tos_tick.c ****  *
   5:..//kernel/core/tos_tick.c ****  * Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
   6:..//kernel/core/tos_tick.c ****  * If you have downloaded a copy of the TencentOS binary from Tencent, please
   7:..//kernel/core/tos_tick.c ****  * note that the TencentOS binary is licensed under the BSD 3-Clause License.
   8:..//kernel/core/tos_tick.c ****  *
   9:..//kernel/core/tos_tick.c ****  * If you have downloaded a copy of the TencentOS source code from Tencent,
  10:..//kernel/core/tos_tick.c ****  * please note that TencentOS source code is licensed under the BSD 3-Clause
  11:..//kernel/core/tos_tick.c ****  * License, except for the third-party components listed below which are
  12:..//kernel/core/tos_tick.c ****  * subject to different license terms. Your integration of TencentOS into your
  13:..//kernel/core/tos_tick.c ****  * own projects may require compliance with the BSD 3-Clause License, as well
  14:..//kernel/core/tos_tick.c ****  * as the other licenses applicable to the third-party components included
  15:..//kernel/core/tos_tick.c ****  * within TencentOS.
  16:..//kernel/core/tos_tick.c ****  *---------------------------------------------------------------------------*/
  17:..//kernel/core/tos_tick.c **** 
  18:..//kernel/core/tos_tick.c **** #include "tos_k.h"
  19:..//kernel/core/tos_tick.c **** 
  20:..//kernel/core/tos_tick.c **** __STATIC__ void tick_task_place(k_task_t *task, k_tick_t timeout)
  21:..//kernel/core/tos_tick.c **** {
  27              		.loc 1 21 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		.loc 1 21 1 is_stmt 0 view .LVU1
  32 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 32
  35              		.cfi_offset 3, -32
  36              		.cfi_offset 4, -28
  37              		.cfi_offset 5, -24
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 2


  38              		.cfi_offset 6, -20
  39              		.cfi_offset 7, -16
  40              		.cfi_offset 8, -12
  41              		.cfi_offset 9, -8
  42              		.cfi_offset 14, -4
  43 0004 8046     		mov	r8, r0
  44 0006 1646     		mov	r6, r2
  45 0008 1F46     		mov	r7, r3
  22:..//kernel/core/tos_tick.c ****     TOS_CPU_CPSR_ALLOC();
  46              		.loc 1 22 5 is_stmt 1 view .LVU2
  47              	.LVL1:
  23:..//kernel/core/tos_tick.c ****     k_task_t *curr_task = K_NULL;
  48              		.loc 1 23 5 view .LVU3
  24:..//kernel/core/tos_tick.c ****     k_tick_t curr_expires, prev_expires = (k_tick_t)0u;
  49              		.loc 1 24 5 view .LVU4
  25:..//kernel/core/tos_tick.c **** 
  26:..//kernel/core/tos_tick.c ****     TOS_CPU_INT_DISABLE();
  50              		.loc 1 26 5 view .LVU5
  51              		.loc 1 26 5 view .LVU6
  52 000a FFF7FEFF 		bl	tos_cpu_cpsr_save
  53              	.LVL2:
  27:..//kernel/core/tos_tick.c **** 
  28:..//kernel/core/tos_tick.c ****     task->tick_expires = timeout;
  54              		.loc 1 28 5 view .LVU7
  55              		.loc 1 28 24 is_stmt 0 view .LVU8
  56 000e C8E91067 		strd	r6, [r8, #64]
  29:..//kernel/core/tos_tick.c **** 
  30:..//kernel/core/tos_tick.c ****     TOS_LIST_FOR_EACH_ENTRY(curr_task, k_task_t, tick_list, &k_tick_list) {
  57              		.loc 1 30 5 is_stmt 1 view .LVU9
  58 0012 1E4B     		ldr	r3, .L8
  59 0014 1B68     		ldr	r3, [r3]
  60 0016 483B     		subs	r3, r3, #72
  61              	.LVL3:
  24:..//kernel/core/tos_tick.c **** 
  62              		.loc 1 24 28 is_stmt 0 view .LVU10
  63 0018 0021     		movs	r1, #0
  64 001a 8C46     		mov	ip, r1
  65              		.loc 1 30 5 view .LVU11
  66 001c 03E0     		b	.L2
  67              	.LVL4:
  68              	.L4:
  31:..//kernel/core/tos_tick.c ****         curr_expires = prev_expires + curr_task->tick_expires;
  32:..//kernel/core/tos_tick.c **** 
  33:..//kernel/core/tos_tick.c ****         if (task->tick_expires < curr_expires) {
  34:..//kernel/core/tos_tick.c ****             break;
  35:..//kernel/core/tos_tick.c ****         }
  36:..//kernel/core/tos_tick.c ****         if (task->tick_expires == curr_expires &&
  37:..//kernel/core/tos_tick.c ****             task->prio < curr_task->prio) {
  38:..//kernel/core/tos_tick.c ****             break;
  39:..//kernel/core/tos_tick.c ****         }
  40:..//kernel/core/tos_tick.c ****         prev_expires = curr_expires;
  69              		.loc 1 40 9 is_stmt 1 discriminator 2 view .LVU12
  30:..//kernel/core/tos_tick.c ****         curr_expires = prev_expires + curr_task->tick_expires;
  70              		.loc 1 30 5 is_stmt 0 discriminator 2 view .LVU13
  71 001e 9B6C     		ldr	r3, [r3, #72]
  72              	.LVL5:
  30:..//kernel/core/tos_tick.c ****         curr_expires = prev_expires + curr_task->tick_expires;
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 3


  73              		.loc 1 30 5 discriminator 2 view .LVU14
  74 0020 483B     		subs	r3, r3, #72
  75              	.LVL6:
  76              		.loc 1 40 22 discriminator 2 view .LVU15
  77 0022 2146     		mov	r1, r4
  78 0024 AC46     		mov	ip, r5
  79              	.LVL7:
  80              	.L2:
  30:..//kernel/core/tos_tick.c ****         curr_expires = prev_expires + curr_task->tick_expires;
  81              		.loc 1 30 5 discriminator 1 view .LVU16
  82 0026 03F1480E 		add	lr, r3, #72
  83 002a 184A     		ldr	r2, .L8
  84 002c 9645     		cmp	lr, r2
  85 002e 0FD0     		beq	.L3
  31:..//kernel/core/tos_tick.c ****         curr_expires = prev_expires + curr_task->tick_expires;
  86              		.loc 1 31 9 is_stmt 1 view .LVU17
  31:..//kernel/core/tos_tick.c ****         curr_expires = prev_expires + curr_task->tick_expires;
  87              		.loc 1 31 48 is_stmt 0 view .LVU18
  88 0030 1A6C     		ldr	r2, [r3, #64]
  31:..//kernel/core/tos_tick.c ****         curr_expires = prev_expires + curr_task->tick_expires;
  89              		.loc 1 31 22 view .LVU19
  90 0032 5418     		adds	r4, r2, r1
  91 0034 5A6C     		ldr	r2, [r3, #68]
  92 0036 42EB0C05 		adc	r5, r2, ip
  93              	.LVL8:
  33:..//kernel/core/tos_tick.c ****             break;
  94              		.loc 1 33 9 is_stmt 1 view .LVU20
  33:..//kernel/core/tos_tick.c ****             break;
  95              		.loc 1 33 12 is_stmt 0 view .LVU21
  96 003a AF42     		cmp	r7, r5
  97 003c 08BF     		it	eq
  98 003e A642     		cmpeq	r6, r4
  99 0040 06D3     		bcc	.L3
  36:..//kernel/core/tos_tick.c ****             task->prio < curr_task->prio) {
 100              		.loc 1 36 9 is_stmt 1 view .LVU22
  36:..//kernel/core/tos_tick.c ****             task->prio < curr_task->prio) {
 101              		.loc 1 36 12 is_stmt 0 view .LVU23
 102 0042 ECD1     		bne	.L4
  37:..//kernel/core/tos_tick.c ****             break;
 103              		.loc 1 37 17 discriminator 1 view .LVU24
 104 0044 98F82190 		ldrb	r9, [r8, #33]	@ zero_extendqisi2
  37:..//kernel/core/tos_tick.c ****             break;
 105              		.loc 1 37 35 discriminator 1 view .LVU25
 106 0048 93F82120 		ldrb	r2, [r3, #33]	@ zero_extendqisi2
  36:..//kernel/core/tos_tick.c ****             task->prio < curr_task->prio) {
 107              		.loc 1 36 48 discriminator 1 view .LVU26
 108 004c 9145     		cmp	r9, r2
 109 004e E6D2     		bcs	.L4
 110              	.LVL9:
 111              	.L3:
  41:..//kernel/core/tos_tick.c ****     }
  42:..//kernel/core/tos_tick.c ****     task->tick_expires -= prev_expires;
 112              		.loc 1 42 5 is_stmt 1 view .LVU27
 113              		.loc 1 42 24 is_stmt 0 view .LVU28
 114 0050 711A     		subs	r1, r6, r1
 115              	.LVL10:
 116              		.loc 1 42 24 view .LVU29
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 4


 117 0052 67EB0C02 		sbc	r2, r7, ip
 118 0056 C8F84010 		str	r1, [r8, #64]
 119 005a C8F84420 		str	r2, [r8, #68]
  43:..//kernel/core/tos_tick.c ****     if (&curr_task->tick_list != &k_tick_list) {
 120              		.loc 1 43 5 is_stmt 1 view .LVU30
 121              		.loc 1 43 8 is_stmt 0 view .LVU31
 122 005e 0B4C     		ldr	r4, .L8
 123 0060 A645     		cmp	lr, r4
 124 0062 06D0     		beq	.L6
  44:..//kernel/core/tos_tick.c ****         curr_task->tick_expires -= task->tick_expires;
 125              		.loc 1 44 9 is_stmt 1 view .LVU32
 126              		.loc 1 44 33 is_stmt 0 view .LVU33
 127 0064 1C6C     		ldr	r4, [r3, #64]
 128 0066 5D6C     		ldr	r5, [r3, #68]
 129 0068 611A     		subs	r1, r4, r1
 130 006a 65EB0202 		sbc	r2, r5, r2
 131 006e 1964     		str	r1, [r3, #64]
 132 0070 5A64     		str	r2, [r3, #68]
 133              	.L6:
  45:..//kernel/core/tos_tick.c ****     }
  46:..//kernel/core/tos_tick.c ****     tos_list_add_tail(&task->tick_list, &curr_task->tick_list);
 134              		.loc 1 46 5 is_stmt 1 view .LVU34
 135 0072 08F14801 		add	r1, r8, #72
 136              	.LVL11:
 137              	.LBB24:
 138              	.LBI24:
 139              		.file 2 "..//kernel/core/include/tos_list.h"
   1:..//kernel/core/include/tos_list.h **** /*----------------------------------------------------------------------------
   2:..//kernel/core/include/tos_list.h ****  * Tencent is pleased to support the open source community by making TencentOS
   3:..//kernel/core/include/tos_list.h ****  * available.
   4:..//kernel/core/include/tos_list.h ****  *
   5:..//kernel/core/include/tos_list.h ****  * Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
   6:..//kernel/core/include/tos_list.h ****  * If you have downloaded a copy of the TencentOS binary from Tencent, please
   7:..//kernel/core/include/tos_list.h ****  * note that the TencentOS binary is licensed under the BSD 3-Clause License.
   8:..//kernel/core/include/tos_list.h ****  *
   9:..//kernel/core/include/tos_list.h ****  * If you have downloaded a copy of the TencentOS source code from Tencent,
  10:..//kernel/core/include/tos_list.h ****  * please note that TencentOS source code is licensed under the BSD 3-Clause
  11:..//kernel/core/include/tos_list.h ****  * License, except for the third-party components listed below which are
  12:..//kernel/core/include/tos_list.h ****  * subject to different license terms. Your integration of TencentOS into your
  13:..//kernel/core/include/tos_list.h ****  * own projects may require compliance with the BSD 3-Clause License, as well
  14:..//kernel/core/include/tos_list.h ****  * as the other licenses applicable to the third-party components included
  15:..//kernel/core/include/tos_list.h ****  * within TencentOS.
  16:..//kernel/core/include/tos_list.h ****  *---------------------------------------------------------------------------*/
  17:..//kernel/core/include/tos_list.h **** 
  18:..//kernel/core/include/tos_list.h **** #ifndef _TOS_LIST_H_
  19:..//kernel/core/include/tos_list.h **** #define  _TOS_LIST_H_
  20:..//kernel/core/include/tos_list.h **** 
  21:..//kernel/core/include/tos_list.h **** __CDECLS_BEGIN
  22:..//kernel/core/include/tos_list.h **** 
  23:..//kernel/core/include/tos_list.h **** typedef struct k_list_node_st {
  24:..//kernel/core/include/tos_list.h ****     struct k_list_node_st *next;
  25:..//kernel/core/include/tos_list.h ****     struct k_list_node_st *prev;
  26:..//kernel/core/include/tos_list.h **** } k_list_t;
  27:..//kernel/core/include/tos_list.h **** 
  28:..//kernel/core/include/tos_list.h **** #define TOS_LIST_NODE(node) \
  29:..//kernel/core/include/tos_list.h ****     { &(node), &(node) }
  30:..//kernel/core/include/tos_list.h **** 
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 5


  31:..//kernel/core/include/tos_list.h **** #define TOS_LIST_DEFINE(list) \
  32:..//kernel/core/include/tos_list.h ****     k_list_t list = { &(list), &(list) }
  33:..//kernel/core/include/tos_list.h **** 
  34:..//kernel/core/include/tos_list.h **** #define TOS_LIST_ENTRY(node, type, field) \
  35:..//kernel/core/include/tos_list.h ****     TOS_CONTAINER_OF_FIELD(node, type, field)
  36:..//kernel/core/include/tos_list.h **** 
  37:..//kernel/core/include/tos_list.h **** #define TOS_LIST_FIRST_ENTRY(list, type, field) \
  38:..//kernel/core/include/tos_list.h ****     TOS_LIST_ENTRY((list)->next, type, field)
  39:..//kernel/core/include/tos_list.h **** 
  40:..//kernel/core/include/tos_list.h **** #define TOS_LIST_FIRST_ENTRY_OR_NULL(list, type, field) \
  41:..//kernel/core/include/tos_list.h ****     (tos_list_empty(list) ? K_NULL : TOS_LIST_FIRST_ENTRY(list, type, field))
  42:..//kernel/core/include/tos_list.h **** 
  43:..//kernel/core/include/tos_list.h **** #define TOS_LIST_FOR_EACH(curr, list) \
  44:..//kernel/core/include/tos_list.h ****     for (curr = (list)->next; curr != (list); curr = curr->next)
  45:..//kernel/core/include/tos_list.h **** 
  46:..//kernel/core/include/tos_list.h **** #define TOS_LIST_FOR_EACH_PREV(curr, list) \
  47:..//kernel/core/include/tos_list.h ****     for (curr = (list)->prev; curr != (list); curr = curr->prev)
  48:..//kernel/core/include/tos_list.h **** 
  49:..//kernel/core/include/tos_list.h **** #define TOS_LIST_FOR_EACH_SAFE(curr, next, list) \
  50:..//kernel/core/include/tos_list.h ****     for (curr = (list)->next, next = curr->next; curr != (list); \
  51:..//kernel/core/include/tos_list.h ****             curr = next, next = curr->next)
  52:..//kernel/core/include/tos_list.h **** 
  53:..//kernel/core/include/tos_list.h **** #define TOS_LIST_FOR_EACH_PREV_SAFE(curr, next, list) \
  54:..//kernel/core/include/tos_list.h ****     for (curr = (list)->prev, next = curr->prev; \
  55:..//kernel/core/include/tos_list.h ****             curr != (list); \
  56:..//kernel/core/include/tos_list.h ****             curr = next, next = curr->prev)
  57:..//kernel/core/include/tos_list.h **** 
  58:..//kernel/core/include/tos_list.h **** #define TOS_LIST_FOR_EACH_ENTRY(entry, type, field, list) \
  59:..//kernel/core/include/tos_list.h ****     for (entry = TOS_LIST_ENTRY((list)->next, type, field); \
  60:..//kernel/core/include/tos_list.h ****         &entry->field != (list); \
  61:..//kernel/core/include/tos_list.h ****         entry = TOS_LIST_ENTRY(entry->field.next, type, field))
  62:..//kernel/core/include/tos_list.h **** 
  63:..//kernel/core/include/tos_list.h **** #define TOS_LIST_FOR_EACH_ENTRY_REVERSE(entry, type, field, list) \
  64:..//kernel/core/include/tos_list.h ****     for (entry = TOS_LIST_ENTRY((list)->prev, type, field); \
  65:..//kernel/core/include/tos_list.h ****             &entry->field != (list); \
  66:..//kernel/core/include/tos_list.h ****             entry = TOS_LIST_ENTRY(entry->field.prev, type, field))
  67:..//kernel/core/include/tos_list.h **** 
  68:..//kernel/core/include/tos_list.h **** #define TOS_LIST_FOR_EACH_ENTRY_SAFE(entry, tmp, type, field, list) \
  69:..//kernel/core/include/tos_list.h ****     for (entry = TOS_LIST_ENTRY((list)->next, type, field), \
  70:..//kernel/core/include/tos_list.h ****             tmp = TOS_LIST_ENTRY(entry->field.next, type, field); \
  71:..//kernel/core/include/tos_list.h ****             &entry->field != (list); \
  72:..//kernel/core/include/tos_list.h ****             entry = tmp, tmp = TOS_LIST_ENTRY(entry->field.next, type, field))
  73:..//kernel/core/include/tos_list.h **** 
  74:..//kernel/core/include/tos_list.h **** #define TOS_LIST_FOR_EACH_ENTRY_SAFE_REVERSE(entry, tmp, type, field, list) \
  75:..//kernel/core/include/tos_list.h ****     for (entry = TOS_LIST_ENTRY((list)->prev, type, field), \
  76:..//kernel/core/include/tos_list.h ****             tmp = TOS_LIST_ENTRY(entry->field.prev, type, field); \
  77:..//kernel/core/include/tos_list.h ****             &entry->field != (list); \
  78:..//kernel/core/include/tos_list.h ****             entry = tmp, tmp = TOS_LIST_ENTRY(entry->field.prev, type, field))
  79:..//kernel/core/include/tos_list.h **** 
  80:..//kernel/core/include/tos_list.h **** __STATIC_INLINE__ void _list_add(k_list_t *node, k_list_t *prev, k_list_t *next)
  81:..//kernel/core/include/tos_list.h **** {
  82:..//kernel/core/include/tos_list.h ****     next->prev = node;
  83:..//kernel/core/include/tos_list.h ****     node->next = next;
  84:..//kernel/core/include/tos_list.h ****     node->prev = prev;
  85:..//kernel/core/include/tos_list.h ****     prev->next = node;
  86:..//kernel/core/include/tos_list.h **** }
  87:..//kernel/core/include/tos_list.h **** 
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 6


  88:..//kernel/core/include/tos_list.h **** __STATIC_INLINE__ void _list_del(k_list_t *prev, k_list_t *next)
  89:..//kernel/core/include/tos_list.h **** {
  90:..//kernel/core/include/tos_list.h ****     next->prev = prev;
  91:..//kernel/core/include/tos_list.h ****     prev->next = next;
  92:..//kernel/core/include/tos_list.h **** }
  93:..//kernel/core/include/tos_list.h **** 
  94:..//kernel/core/include/tos_list.h **** __STATIC_INLINE__ void _list_del_node(k_list_t *node)
  95:..//kernel/core/include/tos_list.h **** {
  96:..//kernel/core/include/tos_list.h ****     _list_del(node->prev, node->next);
  97:..//kernel/core/include/tos_list.h **** }
  98:..//kernel/core/include/tos_list.h **** 
  99:..//kernel/core/include/tos_list.h **** __API__ __STATIC_INLINE__ void tos_list_init(k_list_t *list)
 100:..//kernel/core/include/tos_list.h **** {
 101:..//kernel/core/include/tos_list.h ****     list->next = list;
 102:..//kernel/core/include/tos_list.h ****     list->prev = list;
 103:..//kernel/core/include/tos_list.h **** }
 104:..//kernel/core/include/tos_list.h **** 
 105:..//kernel/core/include/tos_list.h **** __API__ __STATIC_INLINE__ void tos_list_add(k_list_t *node, k_list_t *list)
 106:..//kernel/core/include/tos_list.h **** {
 107:..//kernel/core/include/tos_list.h ****     _list_add(node, list, list->next);
 108:..//kernel/core/include/tos_list.h **** }
 109:..//kernel/core/include/tos_list.h **** 
 110:..//kernel/core/include/tos_list.h **** __API__ __STATIC_INLINE__ void tos_list_add_tail(k_list_t *node, k_list_t *list)
 140              		.loc 2 110 32 view .LVU35
 141              	.LBB25:
 111:..//kernel/core/include/tos_list.h **** {
 112:..//kernel/core/include/tos_list.h ****     _list_add(node, list->prev, list);
 142              		.loc 2 112 5 view .LVU36
 143              		.loc 2 112 25 is_stmt 0 view .LVU37
 144 0076 DA6C     		ldr	r2, [r3, #76]
 145              	.LVL12:
 146              	.LBB26:
 147              	.LBI26:
  80:..//kernel/core/include/tos_list.h **** {
 148              		.loc 2 80 24 is_stmt 1 view .LVU38
 149              	.LBB27:
  82:..//kernel/core/include/tos_list.h ****     node->next = next;
 150              		.loc 2 82 5 view .LVU39
  82:..//kernel/core/include/tos_list.h ****     node->next = next;
 151              		.loc 2 82 16 is_stmt 0 view .LVU40
 152 0078 D964     		str	r1, [r3, #76]
  83:..//kernel/core/include/tos_list.h ****     node->prev = prev;
 153              		.loc 2 83 5 is_stmt 1 view .LVU41
  83:..//kernel/core/include/tos_list.h ****     node->prev = prev;
 154              		.loc 2 83 16 is_stmt 0 view .LVU42
 155 007a C8F848E0 		str	lr, [r8, #72]
  84:..//kernel/core/include/tos_list.h ****     prev->next = node;
 156              		.loc 2 84 5 is_stmt 1 view .LVU43
  84:..//kernel/core/include/tos_list.h ****     prev->next = node;
 157              		.loc 2 84 16 is_stmt 0 view .LVU44
 158 007e C8F84C20 		str	r2, [r8, #76]
  85:..//kernel/core/include/tos_list.h **** }
 159              		.loc 2 85 5 is_stmt 1 view .LVU45
  85:..//kernel/core/include/tos_list.h **** }
 160              		.loc 2 85 16 is_stmt 0 view .LVU46
 161 0082 1160     		str	r1, [r2]
 162              	.LVL13:
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 7


  85:..//kernel/core/include/tos_list.h **** }
 163              		.loc 2 85 16 view .LVU47
 164              	.LBE27:
 165              	.LBE26:
 166              	.LBE25:
 167              	.LBE24:
  47:..//kernel/core/tos_tick.c **** 
  48:..//kernel/core/tos_tick.c ****     TOS_CPU_INT_ENABLE();
 168              		.loc 1 48 5 is_stmt 1 view .LVU48
 169              		.loc 1 48 5 view .LVU49
 170 0084 FFF7FEFF 		bl	tos_cpu_cpsr_restore
 171              	.LVL14:
  49:..//kernel/core/tos_tick.c **** }
 172              		.loc 1 49 1 is_stmt 0 view .LVU50
 173 0088 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 174              	.LVL15:
 175              	.L9:
 176              		.loc 1 49 1 view .LVU51
 177              		.align	2
 178              	.L8:
 179 008c 00000000 		.word	k_tick_list
 180              		.cfi_endproc
 181              	.LFE110:
 183              		.section	.text.tick_task_takeoff,"ax",%progbits
 184              		.align	1
 185              		.syntax unified
 186              		.thumb
 187              		.thumb_func
 188              		.fpu softvfp
 190              	tick_task_takeoff:
 191              	.LVL16:
 192              	.LFB111:
  50:..//kernel/core/tos_tick.c **** 
  51:..//kernel/core/tos_tick.c **** __STATIC__ void tick_task_takeoff(k_task_t *task)
  52:..//kernel/core/tos_tick.c **** {
 193              		.loc 1 52 1 is_stmt 1 view -0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197              		.loc 1 52 1 is_stmt 0 view .LVU53
 198 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 199              	.LCFI1:
 200              		.cfi_def_cfa_offset 32
 201              		.cfi_offset 3, -32
 202              		.cfi_offset 4, -28
 203              		.cfi_offset 5, -24
 204              		.cfi_offset 6, -20
 205              		.cfi_offset 7, -16
 206              		.cfi_offset 8, -12
 207              		.cfi_offset 9, -8
 208              		.cfi_offset 14, -4
 209 0004 0446     		mov	r4, r0
  53:..//kernel/core/tos_tick.c ****     TOS_CPU_CPSR_ALLOC();
 210              		.loc 1 53 5 is_stmt 1 view .LVU54
 211              	.LVL17:
  54:..//kernel/core/tos_tick.c ****     k_task_t *next;
 212              		.loc 1 54 5 view .LVU55
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 8


  55:..//kernel/core/tos_tick.c **** 
  56:..//kernel/core/tos_tick.c ****     TOS_CPU_INT_DISABLE();
 213              		.loc 1 56 5 view .LVU56
 214              		.loc 1 56 5 view .LVU57
 215 0006 FFF7FEFF 		bl	tos_cpu_cpsr_save
 216              	.LVL18:
  57:..//kernel/core/tos_tick.c **** 
  58:..//kernel/core/tos_tick.c ****     next = TOS_LIST_FIRST_ENTRY_OR_NULL(&task->tick_list, k_task_t, tick_list);
 217              		.loc 1 58 5 view .LVU58
 218              		.loc 1 58 12 is_stmt 0 view .LVU59
 219 000a 04F14802 		add	r2, r4, #72
 220              	.LVL19:
 221              	.LBB28:
 222              	.LBI28:
 113:..//kernel/core/include/tos_list.h **** }
 114:..//kernel/core/include/tos_list.h **** 
 115:..//kernel/core/include/tos_list.h **** __API__ __STATIC_INLINE__ void tos_list_del(k_list_t *node)
 116:..//kernel/core/include/tos_list.h **** {
 117:..//kernel/core/include/tos_list.h ****     _list_del(node->prev, node->next);
 118:..//kernel/core/include/tos_list.h **** }
 119:..//kernel/core/include/tos_list.h **** 
 120:..//kernel/core/include/tos_list.h **** __API__ __STATIC_INLINE__ void tos_list_del_init(k_list_t *node)
 121:..//kernel/core/include/tos_list.h **** {
 122:..//kernel/core/include/tos_list.h ****     _list_del_node(node);
 123:..//kernel/core/include/tos_list.h ****     tos_list_init(node);
 124:..//kernel/core/include/tos_list.h **** }
 125:..//kernel/core/include/tos_list.h **** 
 126:..//kernel/core/include/tos_list.h **** __API__ __STATIC_INLINE__ void tos_list_move(k_list_t *node, k_list_t *list)
 127:..//kernel/core/include/tos_list.h **** {
 128:..//kernel/core/include/tos_list.h ****     _list_del_node(node);
 129:..//kernel/core/include/tos_list.h ****     tos_list_add(node, list);
 130:..//kernel/core/include/tos_list.h **** }
 131:..//kernel/core/include/tos_list.h **** 
 132:..//kernel/core/include/tos_list.h **** __API__ __STATIC_INLINE__ void tos_list_move_tail(k_list_t *node, k_list_t *list)
 133:..//kernel/core/include/tos_list.h **** {
 134:..//kernel/core/include/tos_list.h ****     _list_del_node(node);
 135:..//kernel/core/include/tos_list.h ****     tos_list_add_tail(node, list);
 136:..//kernel/core/include/tos_list.h **** }
 137:..//kernel/core/include/tos_list.h **** 
 138:..//kernel/core/include/tos_list.h **** __API__ __STATIC_INLINE__ int tos_list_empty(const k_list_t *list)
 223              		.loc 2 138 31 is_stmt 1 view .LVU60
 224              	.LBB29:
 139:..//kernel/core/include/tos_list.h **** {
 140:..//kernel/core/include/tos_list.h ****     return list->next == list;
 225              		.loc 2 140 5 view .LVU61
 226              		.loc 2 140 16 is_stmt 0 view .LVU62
 227 000e A36C     		ldr	r3, [r4, #72]
 228              	.LVL20:
 229              		.loc 2 140 16 view .LVU63
 230              	.LBE29:
 231              	.LBE28:
 232              		.loc 1 58 12 view .LVU64
 233 0010 9A42     		cmp	r2, r3
 234 0012 1AD0     		beq	.L11
 235              	.LVL21:
  59:..//kernel/core/tos_tick.c ****     if (next && task->tick_list.next != &k_tick_list) { // not the only one
 236              		.loc 1 59 5 is_stmt 1 discriminator 1 view .LVU65
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 9


 237              		.loc 1 59 8 is_stmt 0 discriminator 1 view .LVU66
 238 0014 B3F14802 		subs	r2, r3, #72
 239              	.LVL22:
 240              		.loc 1 59 8 discriminator 1 view .LVU67
 241 0018 17D0     		beq	.L11
 242              		.loc 1 59 14 discriminator 1 view .LVU68
 243 001a 1349     		ldr	r1, .L14
 244 001c 8B42     		cmp	r3, r1
 245 001e 14D0     		beq	.L11
  60:..//kernel/core/tos_tick.c ****         if (next->tick_expires <= K_TIME_MAX - task->tick_expires) {
 246              		.loc 1 60 9 is_stmt 1 view .LVU69
 247              		.loc 1 60 17 is_stmt 0 view .LVU70
 248 0020 D2E91089 		ldrd	r8, [r2, #64]
 249              		.loc 1 60 52 view .LVU71
 250 0024 236C     		ldr	r3, [r4, #64]
 251 0026 616C     		ldr	r1, [r4, #68]
 252              		.loc 1 60 46 view .LVU72
 253 0028 6FF00105 		mvn	r5, #1
 254 002c EE1A     		subs	r6, r5, r3
 255 002e 4FF0FF35 		mov	r5, #-1
 256 0032 65EB0107 		sbc	r7, r5, r1
 257              		.loc 1 60 12 view .LVU73
 258 0036 4F45     		cmp	r7, r9
 259 0038 08BF     		it	eq
 260 003a 4645     		cmpeq	r6, r8
 261 003c 0DD3     		bcc	.L12
  61:..//kernel/core/tos_tick.c ****             next->tick_expires += task->tick_expires;
 262              		.loc 1 61 13 is_stmt 1 view .LVU74
 263              		.loc 1 61 32 is_stmt 0 view .LVU75
 264 003e 18EB0303 		adds	r3, r8, r3
 265 0042 49EB0101 		adc	r1, r9, r1
 266 0046 1364     		str	r3, [r2, #64]
 267 0048 5164     		str	r1, [r2, #68]
 268              	.LVL23:
 269              	.L11:
  62:..//kernel/core/tos_tick.c ****         } else {
  63:..//kernel/core/tos_tick.c ****             next->tick_expires = K_TIME_MAX;
  64:..//kernel/core/tos_tick.c ****         }
  65:..//kernel/core/tos_tick.c ****     }
  66:..//kernel/core/tos_tick.c **** 
  67:..//kernel/core/tos_tick.c ****     tos_list_del(&task->tick_list);
 270              		.loc 1 67 5 is_stmt 1 view .LVU76
 271              	.LBB30:
 272              	.LBI30:
 115:..//kernel/core/include/tos_list.h **** {
 273              		.loc 2 115 32 view .LVU77
 274              	.LBB31:
 117:..//kernel/core/include/tos_list.h **** }
 275              		.loc 2 117 5 view .LVU78
 117:..//kernel/core/include/tos_list.h **** }
 276              		.loc 2 117 19 is_stmt 0 view .LVU79
 277 004a E36C     		ldr	r3, [r4, #76]
 117:..//kernel/core/include/tos_list.h **** }
 278              		.loc 2 117 31 view .LVU80
 279 004c A26C     		ldr	r2, [r4, #72]
 280              	.LVL24:
 281              	.LBB32:
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 10


 282              	.LBI32:
  88:..//kernel/core/include/tos_list.h **** {
 283              		.loc 2 88 24 is_stmt 1 view .LVU81
 284              	.LBB33:
  90:..//kernel/core/include/tos_list.h ****     prev->next = next;
 285              		.loc 2 90 5 view .LVU82
  90:..//kernel/core/include/tos_list.h ****     prev->next = next;
 286              		.loc 2 90 16 is_stmt 0 view .LVU83
 287 004e 5360     		str	r3, [r2, #4]
  91:..//kernel/core/include/tos_list.h **** }
 288              		.loc 2 91 5 is_stmt 1 view .LVU84
  91:..//kernel/core/include/tos_list.h **** }
 289              		.loc 2 91 16 is_stmt 0 view .LVU85
 290 0050 1A60     		str	r2, [r3]
 291              	.LVL25:
  91:..//kernel/core/include/tos_list.h **** }
 292              		.loc 2 91 16 view .LVU86
 293              	.LBE33:
 294              	.LBE32:
 295              	.LBE31:
 296              	.LBE30:
  68:..//kernel/core/tos_tick.c **** 
  69:..//kernel/core/tos_tick.c ****     TOS_CPU_INT_ENABLE();
 297              		.loc 1 69 5 is_stmt 1 view .LVU87
 298              		.loc 1 69 5 view .LVU88
 299 0052 FFF7FEFF 		bl	tos_cpu_cpsr_restore
 300              	.LVL26:
  70:..//kernel/core/tos_tick.c **** }
 301              		.loc 1 70 1 is_stmt 0 view .LVU89
 302 0056 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 303              	.LVL27:
 304              	.L12:
  63:..//kernel/core/tos_tick.c ****         }
 305              		.loc 1 63 13 is_stmt 1 view .LVU90
  63:..//kernel/core/tos_tick.c ****         }
 306              		.loc 1 63 32 is_stmt 0 view .LVU91
 307 005a 6FF00106 		mvn	r6, #1
 308 005e 4FF0FF37 		mov	r7, #-1
 309 0062 C2E91067 		strd	r6, [r2, #64]
 310 0066 F0E7     		b	.L11
 311              	.L15:
 312              		.align	2
 313              	.L14:
 314 0068 00000000 		.word	k_tick_list
 315              		.cfi_endproc
 316              	.LFE111:
 318              		.section	.text.tick_list_add,"ax",%progbits
 319              		.align	1
 320              		.global	tick_list_add
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 324              		.fpu softvfp
 326              	tick_list_add:
 327              	.LVL28:
 328              	.LFB112:
  71:..//kernel/core/tos_tick.c **** 
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 11


  72:..//kernel/core/tos_tick.c **** __KNL__ void tick_list_add(k_task_t *task, k_tick_t timeout)
  73:..//kernel/core/tos_tick.c **** {
 329              		.loc 1 73 1 is_stmt 1 view -0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 0
 332              		@ frame_needed = 0, uses_anonymous_args = 0
 333              		.loc 1 73 1 is_stmt 0 view .LVU93
 334 0000 10B5     		push	{r4, lr}
 335              	.LCFI2:
 336              		.cfi_def_cfa_offset 8
 337              		.cfi_offset 4, -8
 338              		.cfi_offset 14, -4
 339 0002 0446     		mov	r4, r0
  74:..//kernel/core/tos_tick.c ****     tick_task_place(task, timeout);
 340              		.loc 1 74 5 is_stmt 1 view .LVU94
 341 0004 FFF7FEFF 		bl	tick_task_place
 342              	.LVL29:
  75:..//kernel/core/tos_tick.c ****     task_state_set_sleeping(task);
 343              		.loc 1 75 5 view .LVU95
 344              	.LBB34:
 345              	.LBI34:
 346              		.file 3 "..//kernel/core/include/tos_task.h"
   1:..//kernel/core/include/tos_task.h **** /*----------------------------------------------------------------------------
   2:..//kernel/core/include/tos_task.h ****  * Tencent is pleased to support the open source community by making TencentOS
   3:..//kernel/core/include/tos_task.h ****  * available.
   4:..//kernel/core/include/tos_task.h ****  *
   5:..//kernel/core/include/tos_task.h ****  * Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
   6:..//kernel/core/include/tos_task.h ****  * If you have downloaded a copy of the TencentOS binary from Tencent, please
   7:..//kernel/core/include/tos_task.h ****  * note that the TencentOS binary is licensed under the BSD 3-Clause License.
   8:..//kernel/core/include/tos_task.h ****  *
   9:..//kernel/core/include/tos_task.h ****  * If you have downloaded a copy of the TencentOS source code from Tencent,
  10:..//kernel/core/include/tos_task.h ****  * please note that TencentOS source code is licensed under the BSD 3-Clause
  11:..//kernel/core/include/tos_task.h ****  * License, except for the third-party components listed below which are
  12:..//kernel/core/include/tos_task.h ****  * subject to different license terms. Your integration of TencentOS into your
  13:..//kernel/core/include/tos_task.h ****  * own projects may require compliance with the BSD 3-Clause License, as well
  14:..//kernel/core/include/tos_task.h ****  * as the other licenses applicable to the third-party components included
  15:..//kernel/core/include/tos_task.h ****  * within TencentOS.
  16:..//kernel/core/include/tos_task.h ****  *---------------------------------------------------------------------------*/
  17:..//kernel/core/include/tos_task.h **** 
  18:..//kernel/core/include/tos_task.h **** #ifndef _TOS_TASK_H_
  19:..//kernel/core/include/tos_task.h **** #define  _TOS_TASK_H_
  20:..//kernel/core/include/tos_task.h **** 
  21:..//kernel/core/include/tos_task.h **** __CDECLS_BEGIN
  22:..//kernel/core/include/tos_task.h **** 
  23:..//kernel/core/include/tos_task.h **** #define K_TASK_NAME_MAX                 (16u)
  24:..//kernel/core/include/tos_task.h **** #define K_TASK_STK_SIZE_MIN             (sizeof(cpu_context_t))
  25:..//kernel/core/include/tos_task.h **** 
  26:..//kernel/core/include/tos_task.h **** // task state is just a flag, indicating which manager list we are in.
  27:..//kernel/core/include/tos_task.h **** 
  28:..//kernel/core/include/tos_task.h **** // ready to schedule
  29:..//kernel/core/include/tos_task.h **** // a task's pend_list is in readyqueue
  30:..//kernel/core/include/tos_task.h **** #define K_TASK_STATE_READY                (k_task_state_t)0x0000
  31:..//kernel/core/include/tos_task.h **** 
  32:..//kernel/core/include/tos_task.h **** // delayed, or pend for a timeout
  33:..//kernel/core/include/tos_task.h **** // a task's tick_list is in k_tick_list
  34:..//kernel/core/include/tos_task.h **** #define K_TASK_STATE_SLEEP                (k_task_state_t)0x0001
  35:..//kernel/core/include/tos_task.h **** 
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 12


  36:..//kernel/core/include/tos_task.h **** // pend for something
  37:..//kernel/core/include/tos_task.h **** // a task's pend_list is in some pend object's list
  38:..//kernel/core/include/tos_task.h **** #define K_TASK_STATE_PEND                 (k_task_state_t)0x0002
  39:..//kernel/core/include/tos_task.h **** 
  40:..//kernel/core/include/tos_task.h **** // suspended
  41:..//kernel/core/include/tos_task.h **** #define K_TASK_STATE_SUSPENDED            (k_task_state_t)0x0004
  42:..//kernel/core/include/tos_task.h **** 
  43:..//kernel/core/include/tos_task.h **** // deleted
  44:..//kernel/core/include/tos_task.h **** #define K_TASK_STATE_DELETED              (k_task_state_t)0x0008
  45:..//kernel/core/include/tos_task.h **** 
  46:..//kernel/core/include/tos_task.h **** // actually we don't really need those TASK_STATE below, if you understand the task state deeply, t
  47:..//kernel/core/include/tos_task.h **** 
  48:..//kernel/core/include/tos_task.h **** // we are pending, also we are waitting for a timeout(eg. tos_sem_pend with a valid timeout, not TO
  49:..//kernel/core/include/tos_task.h **** // both a task's tick_list and pend_list is not empty
  50:..//kernel/core/include/tos_task.h **** #define K_TASK_STATE_PENDTIMEOUT                      (k_task_state_t)(K_TASK_STATE_PEND | K_TASK_S
  51:..//kernel/core/include/tos_task.h **** 
  52:..//kernel/core/include/tos_task.h **** // suspended when sleeping
  53:..//kernel/core/include/tos_task.h **** #define K_TASK_STATE_SLEEP_SUSPENDED                  (k_task_state_t)(K_TASK_STATE_SLEEP | K_TASK_
  54:..//kernel/core/include/tos_task.h **** 
  55:..//kernel/core/include/tos_task.h **** // suspended when pending
  56:..//kernel/core/include/tos_task.h **** #define K_TASK_STATE_PEND_SUSPENDED                   (k_task_state_t)(K_TASK_STATE_PEND | K_TASK_S
  57:..//kernel/core/include/tos_task.h **** 
  58:..//kernel/core/include/tos_task.h **** // suspended when pendtimeout
  59:..//kernel/core/include/tos_task.h **** #define K_TASK_STATE_PENDTIMEOUT_SUSPENDED            (k_task_state_t)(K_TASK_STATE_PENDTIMEOUT | K
  60:..//kernel/core/include/tos_task.h **** 
  61:..//kernel/core/include/tos_task.h **** 
  62:..//kernel/core/include/tos_task.h **** // if you configure TOS_CFG_TASK_PRIO_MAX as 10, means the priority for kernel is (0 ... 9]
  63:..//kernel/core/include/tos_task.h **** // the priority 9(TOS_CFG_TASK_PRIO_MAX - 1) is only for idle, so avaliable priority for you is (0 
  64:..//kernel/core/include/tos_task.h **** #define K_TASK_PRIO_IDLE                                (k_prio_t)(TOS_CFG_TASK_PRIO_MAX - (k_prio_
  65:..//kernel/core/include/tos_task.h **** #define K_TASK_PRIO_INVALID                             (k_prio_t)(TOS_CFG_TASK_PRIO_MAX)
  66:..//kernel/core/include/tos_task.h **** 
  67:..//kernel/core/include/tos_task.h **** typedef void (*k_task_entry_t)(void *arg);
  68:..//kernel/core/include/tos_task.h **** 
  69:..//kernel/core/include/tos_task.h **** typedef void (*k_task_walker_t)(k_task_t *task);
  70:..//kernel/core/include/tos_task.h **** 
  71:..//kernel/core/include/tos_task.h **** /**
  72:..//kernel/core/include/tos_task.h ****  * task control block
  73:..//kernel/core/include/tos_task.h ****  */
  74:..//kernel/core/include/tos_task.h **** struct k_task_st {
  75:..//kernel/core/include/tos_task.h ****     k_stack_t          *sp;                     /**< task stack pointer. This lady always comes fir
  76:..//kernel/core/include/tos_task.h **** 
  77:..//kernel/core/include/tos_task.h ****     knl_obj_t           knl_obj;                /**< just for verification, test whether current ob
  78:..//kernel/core/include/tos_task.h **** 
  79:..//kernel/core/include/tos_task.h ****     char                name[K_TASK_NAME_MAX];  /**< task name */
  80:..//kernel/core/include/tos_task.h ****     k_task_entry_t      entry;                  /**< task entry */
  81:..//kernel/core/include/tos_task.h ****     void               *arg;                    /**< argument for task entry */
  82:..//kernel/core/include/tos_task.h ****     k_task_state_t      state;                  /**< just state */
  83:..//kernel/core/include/tos_task.h ****     k_prio_t            prio;                   /**< just priority */
  84:..//kernel/core/include/tos_task.h **** 
  85:..//kernel/core/include/tos_task.h ****     k_stack_t          *stk_base;               /**< task stack base address */
  86:..//kernel/core/include/tos_task.h ****     size_t              stk_size;               /**< stack size of the task */
  87:..//kernel/core/include/tos_task.h **** 
  88:..//kernel/core/include/tos_task.h **** #if TOS_CFG_TASK_DYNAMIC_CREATE_EN > 0u
  89:..//kernel/core/include/tos_task.h ****     k_list_t            dead_list;              /**< when a dynamic allocated task destroyed, we ho
  90:..//kernel/core/include/tos_task.h **** #endif
  91:..//kernel/core/include/tos_task.h **** 
  92:..//kernel/core/include/tos_task.h ****     k_list_t            stat_list;              /**< list for hooking us to the k_stat_list */
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 13


  93:..//kernel/core/include/tos_task.h **** 
  94:..//kernel/core/include/tos_task.h ****     k_tick_t            tick_expires;           /**< if we are in k_tick_list, how much time will w
  95:..//kernel/core/include/tos_task.h **** 
  96:..//kernel/core/include/tos_task.h ****     k_list_t            tick_list;              /**< list for hooking us to the k_tick_list */
  97:..//kernel/core/include/tos_task.h ****     k_list_t            pend_list;              /**< when we are ready, our pend_list is in readyqu
  98:..//kernel/core/include/tos_task.h **** 
  99:..//kernel/core/include/tos_task.h **** #if TOS_CFG_MUTEX_EN > 0u
 100:..//kernel/core/include/tos_task.h ****     k_list_t            mutex_own_list;         /**< the list hold all the mutex we own.
 101:..//kernel/core/include/tos_task.h ****                                                     When we die(tos_task_destroy), we have an oblig
 102:..//kernel/core/include/tos_task.h ****                                                     if not, those pending tasks may never get a cha
 103:..//kernel/core/include/tos_task.h ****     k_prio_t            prio_pending;           /*< when tos_task_prio_change called, we may be jus
 104:..//kernel/core/include/tos_task.h ****                                                     to avoid PRIORITY INVERSION, must make sure our
 105:..//kernel/core/include/tos_task.h ****                                                     the mutex we hold. So, if the prio_new of tos_t
 106:..//kernel/core/include/tos_task.h ****                                                     (may against the principle of PRIORITY INVERSIO
 107:..//kernel/core/include/tos_task.h ****                                                     change in the right time(mutex_old_owner_releas
 108:..//kernel/core/include/tos_task.h **** #endif
 109:..//kernel/core/include/tos_task.h **** 
 110:..//kernel/core/include/tos_task.h ****     pend_obj_t         *pending_obj;            /**< if we are pending, which pend object's list we
 111:..//kernel/core/include/tos_task.h ****     pend_state_t        pend_state;             /**< why we wakeup from a pend */
 112:..//kernel/core/include/tos_task.h **** 
 113:..//kernel/core/include/tos_task.h **** #if TOS_CFG_ROUND_ROBIN_EN > 0u
 114:..//kernel/core/include/tos_task.h ****     k_timeslice_t       timeslice_reload;   /**< if current time slice is used up, use time_slice_r
 115:..//kernel/core/include/tos_task.h ****     k_timeslice_t       timeslice;          /**< how much time slice left for us? */
 116:..//kernel/core/include/tos_task.h **** #endif
 117:..//kernel/core/include/tos_task.h **** 
 118:..//kernel/core/include/tos_task.h **** #if (TOS_CFG_MESSAGE_QUEUE_EN > 0u) || (TOS_CFG_PRIORITY_MESSAGE_QUEUE_EN > 0u)
 119:..//kernel/core/include/tos_task.h ****     void               *msg;                /**< if we pend a message queue successfully, our msg w
 120:..//kernel/core/include/tos_task.h **** #endif
 121:..//kernel/core/include/tos_task.h **** 
 122:..//kernel/core/include/tos_task.h **** #if (TOS_CFG_MAIL_QUEUE_EN > 0u) || (TOS_CFG_PRIORITY_MAIL_QUEUE_EN > 0u)
 123:..//kernel/core/include/tos_task.h ****     void               *mail;               /**< if we pend a mail queue successfully, our mail and
 124:..//kernel/core/include/tos_task.h ****     size_t              mail_size;
 125:..//kernel/core/include/tos_task.h **** #endif
 126:..//kernel/core/include/tos_task.h **** 
 127:..//kernel/core/include/tos_task.h **** #if TOS_CFG_EVENT_EN > 0u
 128:..//kernel/core/include/tos_task.h ****     k_opt_t             opt_event_pend;     /**< if we are pending an event, what's the option for 
 129:..//kernel/core/include/tos_task.h ****     k_event_flag_t      flag_expect;        /**< if we are pending an event, what event flag are we
 130:..//kernel/core/include/tos_task.h ****     k_event_flag_t     *flag_match;         /**< if we pend an event successfully, flag_match will 
 131:..//kernel/core/include/tos_task.h ****                                                     by tos_event_pend to the caller */
 132:..//kernel/core/include/tos_task.h **** #endif
 133:..//kernel/core/include/tos_task.h **** };
 134:..//kernel/core/include/tos_task.h **** 
 135:..//kernel/core/include/tos_task.h **** /**
 136:..//kernel/core/include/tos_task.h ****  * @brief Create a task.
 137:..//kernel/core/include/tos_task.h ****  * create a task.
 138:..//kernel/core/include/tos_task.h ****  *
 139:..//kernel/core/include/tos_task.h ****  * @attention None
 140:..//kernel/core/include/tos_task.h ****  *
 141:..//kernel/core/include/tos_task.h ****  * @param[in]   task        pointer to the handler of the task.
 142:..//kernel/core/include/tos_task.h ****  * @param[in]   name        name of the task.
 143:..//kernel/core/include/tos_task.h ****  * @param[in]   entry       running entry of the task.
 144:..//kernel/core/include/tos_task.h ****  * @param[in]   arg         argument for the entry of the task.
 145:..//kernel/core/include/tos_task.h ****  * @param[in]   prio        priority of the task.
 146:..//kernel/core/include/tos_task.h ****  * @param[in]   stk_base    stack base address of the task.
 147:..//kernel/core/include/tos_task.h ****  * @param[in]   stk_size    stack size of the task.
 148:..//kernel/core/include/tos_task.h ****  * @param[in]   timeslice   time slice of the task.
 149:..//kernel/core/include/tos_task.h ****  *
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 14


 150:..//kernel/core/include/tos_task.h ****  * @return  errcode
 151:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_TASK_STK_SIZE_INVALID    stack size is invalid.
 152:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_TASK_PRIO_INVALID        priority is invalid.
 153:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_NONE                     return successfully.
 154:..//kernel/core/include/tos_task.h ****  */
 155:..//kernel/core/include/tos_task.h **** __API__ k_err_t tos_task_create(k_task_t *task,
 156:..//kernel/core/include/tos_task.h ****                                             char *name,
 157:..//kernel/core/include/tos_task.h ****                                             k_task_entry_t entry,
 158:..//kernel/core/include/tos_task.h ****                                             void *arg,
 159:..//kernel/core/include/tos_task.h ****                                             k_prio_t prio,
 160:..//kernel/core/include/tos_task.h ****                                             k_stack_t *stk_base,
 161:..//kernel/core/include/tos_task.h ****                                             size_t stk_size,
 162:..//kernel/core/include/tos_task.h ****                                             k_timeslice_t timeslice);
 163:..//kernel/core/include/tos_task.h **** 
 164:..//kernel/core/include/tos_task.h **** /**
 165:..//kernel/core/include/tos_task.h ****  * @brief Destroy a task.
 166:..//kernel/core/include/tos_task.h ****  * delete a task.
 167:..//kernel/core/include/tos_task.h ****  *
 168:..//kernel/core/include/tos_task.h ****  * @attention None
 169:..//kernel/core/include/tos_task.h ****  *
 170:..//kernel/core/include/tos_task.h ****  * @param[in]   task        pointer to the handler of the task to be deleted.
 171:..//kernel/core/include/tos_task.h ****  *
 172:..//kernel/core/include/tos_task.h ****  * @return  errcode
 173:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_TASK_DESTROY_IDLE    attempt to destroy idle task.
 174:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_NONE                 return successfully.
 175:..//kernel/core/include/tos_task.h ****  */
 176:..//kernel/core/include/tos_task.h **** __API__ k_err_t tos_task_destroy(k_task_t *task);
 177:..//kernel/core/include/tos_task.h **** 
 178:..//kernel/core/include/tos_task.h **** #if TOS_CFG_TASK_DYNAMIC_CREATE_EN > 0u
 179:..//kernel/core/include/tos_task.h **** 
 180:..//kernel/core/include/tos_task.h **** /**
 181:..//kernel/core/include/tos_task.h ****  * @brief Create a task with a dynamic allocated task handler and stack.
 182:..//kernel/core/include/tos_task.h ****  * create a task with a dynamic allocated task handler and stack.
 183:..//kernel/core/include/tos_task.h ****  *
 184:..//kernel/core/include/tos_task.h ****  * @param[out]  task        dynamic allocated task handler.
 185:..//kernel/core/include/tos_task.h ****  * @param[in]   name        name of the task.
 186:..//kernel/core/include/tos_task.h ****  * @param[in]   entry       running entry of the task.
 187:..//kernel/core/include/tos_task.h ****  * @param[in]   arg         argument for the entry of the task.
 188:..//kernel/core/include/tos_task.h ****  * @param[in]   prio        priority of the task.
 189:..//kernel/core/include/tos_task.h ****  * @param[in]   stk_size    stack size of the task.
 190:..//kernel/core/include/tos_task.h ****  * @param[in]   timeslice   time slice of the task.
 191:..//kernel/core/include/tos_task.h ****  *
 192:..//kernel/core/include/tos_task.h ****  * @return  errcode
 193:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_TASK_STK_SIZE_INVALID    stack size is invalid.
 194:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_TASK_PRIO_INVALID        priority is invalid.
 195:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_TASK_OUT_OF_MEMORY       out of memory(insufficient heap memory).
 196:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_NONE                     return successfully.
 197:..//kernel/core/include/tos_task.h ****  */
 198:..//kernel/core/include/tos_task.h **** __API__ k_err_t tos_task_create_dyn(k_task_t **task,
 199:..//kernel/core/include/tos_task.h ****                                                     char *name,
 200:..//kernel/core/include/tos_task.h ****                                                     k_task_entry_t entry,
 201:..//kernel/core/include/tos_task.h ****                                                     void *arg,
 202:..//kernel/core/include/tos_task.h ****                                                     k_prio_t prio,
 203:..//kernel/core/include/tos_task.h ****                                                     size_t stk_size,
 204:..//kernel/core/include/tos_task.h ****                                                     k_timeslice_t timeslice);
 205:..//kernel/core/include/tos_task.h **** 
 206:..//kernel/core/include/tos_task.h **** #endif
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 15


 207:..//kernel/core/include/tos_task.h **** 
 208:..//kernel/core/include/tos_task.h **** /**
 209:..//kernel/core/include/tos_task.h ****  * @brief Delay current task for ticks.
 210:..//kernel/core/include/tos_task.h ****  * Delay for a specified amount of ticks.
 211:..//kernel/core/include/tos_task.h ****  *
 212:..//kernel/core/include/tos_task.h ****  * @attention None
 213:..//kernel/core/include/tos_task.h ****  *
 214:..//kernel/core/include/tos_task.h ****  * @param[in]   delay       amount of ticks to delay.
 215:..//kernel/core/include/tos_task.h ****  *
 216:..//kernel/core/include/tos_task.h ****  * @return  errcode
 217:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_DELAY_ZERO     delay is zero.
 218:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_NONE           return successfully.
 219:..//kernel/core/include/tos_task.h ****  */
 220:..//kernel/core/include/tos_task.h **** __API__ k_err_t tos_task_delay(k_tick_t delay);
 221:..//kernel/core/include/tos_task.h **** 
 222:..//kernel/core/include/tos_task.h **** /**
 223:..//kernel/core/include/tos_task.h ****  * @brief Resume task from delay.
 224:..//kernel/core/include/tos_task.h ****  * Resume a delayed task from delay.
 225:..//kernel/core/include/tos_task.h ****  *
 226:..//kernel/core/include/tos_task.h ****  * @attention None
 227:..//kernel/core/include/tos_task.h ****  *
 228:..//kernel/core/include/tos_task.h ****  * @param[in]   task        the pointer to the handler of the task.
 229:..//kernel/core/include/tos_task.h ****  *
 230:..//kernel/core/include/tos_task.h ****  * @return  errcode
 231:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_TASK_NOT_DELAY         task is not delayed.
 232:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_TASK_SUSPENDED         task is suspended.
 233:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_NONE                   return successfully.
 234:..//kernel/core/include/tos_task.h ****  */
 235:..//kernel/core/include/tos_task.h **** __API__ k_err_t tos_task_delay_abort(k_task_t *task);
 236:..//kernel/core/include/tos_task.h **** 
 237:..//kernel/core/include/tos_task.h **** /**
 238:..//kernel/core/include/tos_task.h ****  * @brief Suspend a task.
 239:..//kernel/core/include/tos_task.h ****  * Bring a task to sleep.
 240:..//kernel/core/include/tos_task.h ****  *
 241:..//kernel/core/include/tos_task.h ****  * @attention None
 242:..//kernel/core/include/tos_task.h ****  *
 243:..//kernel/core/include/tos_task.h ****  * @param[in]   task        pointer to the handler of the task to be resume.
 244:..//kernel/core/include/tos_task.h ****  *
 245:..//kernel/core/include/tos_task.h ****  * @return  errcode
 246:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_TASK_SUSPEND_IDLE  attempt to suspend idle task.
 247:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_NONE               return successfully.
 248:..//kernel/core/include/tos_task.h ****  */
 249:..//kernel/core/include/tos_task.h **** __API__ k_err_t tos_task_suspend(k_task_t *task);
 250:..//kernel/core/include/tos_task.h **** 
 251:..//kernel/core/include/tos_task.h **** /**
 252:..//kernel/core/include/tos_task.h ****  * @brief Resume a task.
 253:..//kernel/core/include/tos_task.h ****  * Bring a task to run.
 254:..//kernel/core/include/tos_task.h ****  *
 255:..//kernel/core/include/tos_task.h ****  * @attention None
 256:..//kernel/core/include/tos_task.h ****  *
 257:..//kernel/core/include/tos_task.h ****  * @param[in]   task        pointer to the handler of the task to be resume.
 258:..//kernel/core/include/tos_task.h ****  *
 259:..//kernel/core/include/tos_task.h ****  * @return  errcode
 260:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_TASK_RESUME_SELF   attempt to resume self-task.
 261:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_NONE               return successfully.
 262:..//kernel/core/include/tos_task.h ****  */
 263:..//kernel/core/include/tos_task.h **** __API__ k_err_t tos_task_resume(k_task_t *task);
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 16


 264:..//kernel/core/include/tos_task.h **** 
 265:..//kernel/core/include/tos_task.h **** /**
 266:..//kernel/core/include/tos_task.h ****  * @brief Change task priority.
 267:..//kernel/core/include/tos_task.h ****  * Change a priority of the task.
 268:..//kernel/core/include/tos_task.h ****  *
 269:..//kernel/core/include/tos_task.h ****  * @attention None
 270:..//kernel/core/include/tos_task.h ****  *
 271:..//kernel/core/include/tos_task.h ****  * @param[in]   task        pointer to the handler of the task to be resume.
 272:..//kernel/core/include/tos_task.h ****  * @param[in]   prio_new    new priority.
 273:..//kernel/core/include/tos_task.h ****  *
 274:..//kernel/core/include/tos_task.h ****  * @return  errcode
 275:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_TASK_PRIO_INVALID  new priority is invalid.
 276:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_NONE               return successfully.
 277:..//kernel/core/include/tos_task.h ****  */
 278:..//kernel/core/include/tos_task.h **** __API__ k_err_t tos_task_prio_change(k_task_t *task, k_prio_t prio_new);
 279:..//kernel/core/include/tos_task.h **** 
 280:..//kernel/core/include/tos_task.h **** /**
 281:..//kernel/core/include/tos_task.h ****  * @brief Quit schedule this time.
 282:..//kernel/core/include/tos_task.h ****  * Quit the cpu this time.
 283:..//kernel/core/include/tos_task.h ****  *
 284:..//kernel/core/include/tos_task.h ****  * @attention None
 285:..//kernel/core/include/tos_task.h ****  *
 286:..//kernel/core/include/tos_task.h ****  * @param   None
 287:..//kernel/core/include/tos_task.h ****  *
 288:..//kernel/core/include/tos_task.h ****  * @return  None
 289:..//kernel/core/include/tos_task.h ****  */
 290:..//kernel/core/include/tos_task.h **** __API__ void    tos_task_yield(void);
 291:..//kernel/core/include/tos_task.h **** 
 292:..//kernel/core/include/tos_task.h **** /**
 293:..//kernel/core/include/tos_task.h ****  * @brief Get current running task.
 294:..//kernel/core/include/tos_task.h ****  * Get current running task.
 295:..//kernel/core/include/tos_task.h ****  *
 296:..//kernel/core/include/tos_task.h ****  * @attention if kernel is not running, you'll get K_NULL
 297:..//kernel/core/include/tos_task.h ****  *
 298:..//kernel/core/include/tos_task.h ****  * @param   None
 299:..//kernel/core/include/tos_task.h ****  *
 300:..//kernel/core/include/tos_task.h ****  * @return  current running task handler
 301:..//kernel/core/include/tos_task.h ****  */
 302:..//kernel/core/include/tos_task.h **** __API__ k_task_t *tos_task_curr_task_get(void);
 303:..//kernel/core/include/tos_task.h **** 
 304:..//kernel/core/include/tos_task.h **** 
 305:..//kernel/core/include/tos_task.h **** #if TOS_CFG_TASK_STACK_DRAUGHT_DEPTH_DETACT_EN > 0u
 306:..//kernel/core/include/tos_task.h **** 
 307:..//kernel/core/include/tos_task.h **** /**
 308:..//kernel/core/include/tos_task.h ****  * @brief Get the maximum stack draught depth of a task.
 309:..//kernel/core/include/tos_task.h ****  *
 310:..//kernel/core/include/tos_task.h ****  * @attention None
 311:..//kernel/core/include/tos_task.h ****  *
 312:..//kernel/core/include/tos_task.h ****  * @param[in]   task        pointer to the handler of the task.
 313:..//kernel/core/include/tos_task.h ****  * @param[out]  depth       task stack draught depth.
 314:..//kernel/core/include/tos_task.h ****  *
 315:..//kernel/core/include/tos_task.h ****  * @return  errcode
 316:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_NONE                 get depth successfully.
 317:..//kernel/core/include/tos_task.h ****  * @retval  #K_ERR_TASK_STK_OVERFLOW    task stack is overflow.
 318:..//kernel/core/include/tos_task.h ****  */
 319:..//kernel/core/include/tos_task.h **** __API__ k_err_t tos_task_stack_draught_depth(k_task_t *task, int *depth);
 320:..//kernel/core/include/tos_task.h **** 
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 17


 321:..//kernel/core/include/tos_task.h **** #endif
 322:..//kernel/core/include/tos_task.h **** 
 323:..//kernel/core/include/tos_task.h **** /**
 324:..//kernel/core/include/tos_task.h ****  * @brief Walk through all the tasks in the statistic list.
 325:..//kernel/core/include/tos_task.h ****  *
 326:..//kernel/core/include/tos_task.h ****  * @attention None
 327:..//kernel/core/include/tos_task.h ****  *
 328:..//kernel/core/include/tos_task.h ****  * @param[in]   walker      a function involved when meeting each tasks in the list.
 329:..//kernel/core/include/tos_task.h ****  *
 330:..//kernel/core/include/tos_task.h ****  * @return  None
 331:..//kernel/core/include/tos_task.h ****  */
 332:..//kernel/core/include/tos_task.h **** __API__ void tos_task_walkthru(k_task_walker_t walker);
 333:..//kernel/core/include/tos_task.h **** 
 334:..//kernel/core/include/tos_task.h **** /**
 335:..//kernel/core/include/tos_task.h ****  * @brief A debug API for display all tasks information.
 336:..//kernel/core/include/tos_task.h ****  *
 337:..//kernel/core/include/tos_task.h ****  * @attention None
 338:..//kernel/core/include/tos_task.h ****  *
 339:..//kernel/core/include/tos_task.h ****  * @param   None
 340:..//kernel/core/include/tos_task.h ****  *
 341:..//kernel/core/include/tos_task.h ****  * @return  None
 342:..//kernel/core/include/tos_task.h ****  */
 343:..//kernel/core/include/tos_task.h **** __DEBUG__ void tos_task_info_display(void);
 344:..//kernel/core/include/tos_task.h **** 
 345:..//kernel/core/include/tos_task.h **** __KNL__ void task_free_all(void);
 346:..//kernel/core/include/tos_task.h **** 
 347:..//kernel/core/include/tos_task.h **** __KNL__ __STATIC_INLINE__ int task_state_is_ready(k_task_t *task)
 348:..//kernel/core/include/tos_task.h **** {
 349:..//kernel/core/include/tos_task.h ****     return task->state == K_TASK_STATE_READY;
 350:..//kernel/core/include/tos_task.h **** }
 351:..//kernel/core/include/tos_task.h **** 
 352:..//kernel/core/include/tos_task.h **** __KNL__ __STATIC_INLINE__ int task_state_is_sleeping(k_task_t *task)
 353:..//kernel/core/include/tos_task.h **** {
 354:..//kernel/core/include/tos_task.h ****     return task->state & K_TASK_STATE_SLEEP;
 355:..//kernel/core/include/tos_task.h **** }
 356:..//kernel/core/include/tos_task.h **** 
 357:..//kernel/core/include/tos_task.h **** __KNL__ __STATIC_INLINE__ int task_state_is_pending(k_task_t *task)
 358:..//kernel/core/include/tos_task.h **** {
 359:..//kernel/core/include/tos_task.h ****     return task->state & K_TASK_STATE_PEND;
 360:..//kernel/core/include/tos_task.h **** }
 361:..//kernel/core/include/tos_task.h **** 
 362:..//kernel/core/include/tos_task.h **** __KNL__ __STATIC_INLINE__ int task_state_is_suspended(k_task_t *task)
 363:..//kernel/core/include/tos_task.h **** {
 364:..//kernel/core/include/tos_task.h ****     return task->state & K_TASK_STATE_SUSPENDED;
 365:..//kernel/core/include/tos_task.h **** }
 366:..//kernel/core/include/tos_task.h **** 
 367:..//kernel/core/include/tos_task.h **** __KNL__ __STATIC_INLINE__ void task_state_reset_pending(k_task_t *task)
 368:..//kernel/core/include/tos_task.h **** {
 369:..//kernel/core/include/tos_task.h ****     task->state &= ~K_TASK_STATE_PEND;
 370:..//kernel/core/include/tos_task.h **** }
 371:..//kernel/core/include/tos_task.h **** 
 372:..//kernel/core/include/tos_task.h **** __KNL__ __STATIC_INLINE__ void task_state_reset_sleeping(k_task_t *task)
 373:..//kernel/core/include/tos_task.h **** {
 374:..//kernel/core/include/tos_task.h ****     task->state &= ~K_TASK_STATE_SLEEP;
 375:..//kernel/core/include/tos_task.h **** }
 376:..//kernel/core/include/tos_task.h **** 
 377:..//kernel/core/include/tos_task.h **** __KNL__ __STATIC_INLINE__ void task_state_reset_suspended(k_task_t *task)
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 18


 378:..//kernel/core/include/tos_task.h **** {
 379:..//kernel/core/include/tos_task.h ****     task->state &= ~K_TASK_STATE_SUSPENDED;
 380:..//kernel/core/include/tos_task.h **** }
 381:..//kernel/core/include/tos_task.h **** 
 382:..//kernel/core/include/tos_task.h **** __KNL__ __STATIC_INLINE__ void task_state_set_suspended(k_task_t *task)
 383:..//kernel/core/include/tos_task.h **** {
 384:..//kernel/core/include/tos_task.h ****     task->state |= K_TASK_STATE_SUSPENDED;
 385:..//kernel/core/include/tos_task.h **** }
 386:..//kernel/core/include/tos_task.h **** 
 387:..//kernel/core/include/tos_task.h **** __KNL__ __STATIC_INLINE__ void task_state_set_pend(k_task_t *task)
 388:..//kernel/core/include/tos_task.h **** {
 389:..//kernel/core/include/tos_task.h ****     task->state |= K_TASK_STATE_PEND;
 390:..//kernel/core/include/tos_task.h **** }
 391:..//kernel/core/include/tos_task.h **** 
 392:..//kernel/core/include/tos_task.h **** __KNL__ __STATIC_INLINE__ void task_state_set_ready(k_task_t *task)
 393:..//kernel/core/include/tos_task.h **** {
 394:..//kernel/core/include/tos_task.h ****     task->state = K_TASK_STATE_READY;
 395:..//kernel/core/include/tos_task.h **** }
 396:..//kernel/core/include/tos_task.h **** 
 397:..//kernel/core/include/tos_task.h **** __KNL__ __STATIC_INLINE__ void task_state_set_deleted(k_task_t *task)
 398:..//kernel/core/include/tos_task.h **** {
 399:..//kernel/core/include/tos_task.h ****     task->state = K_TASK_STATE_DELETED;
 400:..//kernel/core/include/tos_task.h **** }
 401:..//kernel/core/include/tos_task.h **** 
 402:..//kernel/core/include/tos_task.h **** __KNL__ __STATIC_INLINE__ void task_state_set_sleeping(k_task_t *task)
 347              		.loc 3 402 32 view .LVU96
 348              	.LBB35:
 403:..//kernel/core/include/tos_task.h **** {
 404:..//kernel/core/include/tos_task.h ****     task->state |= K_TASK_STATE_SLEEP;
 349              		.loc 3 404 5 view .LVU97
 350              		.loc 3 404 17 is_stmt 0 view .LVU98
 351 0008 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 352 000c 43F00103 		orr	r3, r3, #1
 353 0010 84F82030 		strb	r3, [r4, #32]
 354              	.LVL30:
 355              		.loc 3 404 17 view .LVU99
 356              	.LBE35:
 357              	.LBE34:
  76:..//kernel/core/tos_tick.c **** }
 358              		.loc 1 76 1 view .LVU100
 359 0014 10BD     		pop	{r4, pc}
 360              		.loc 1 76 1 view .LVU101
 361              		.cfi_endproc
 362              	.LFE112:
 364              		.section	.text.tick_list_remove,"ax",%progbits
 365              		.align	1
 366              		.global	tick_list_remove
 367              		.syntax unified
 368              		.thumb
 369              		.thumb_func
 370              		.fpu softvfp
 372              	tick_list_remove:
 373              	.LVL31:
 374              	.LFB113:
  77:..//kernel/core/tos_tick.c **** 
  78:..//kernel/core/tos_tick.c **** __KNL__ void tick_list_remove(k_task_t *task)
  79:..//kernel/core/tos_tick.c **** {
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 19


 375              		.loc 1 79 1 is_stmt 1 view -0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 0
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379              		.loc 1 79 1 is_stmt 0 view .LVU103
 380 0000 10B5     		push	{r4, lr}
 381              	.LCFI3:
 382              		.cfi_def_cfa_offset 8
 383              		.cfi_offset 4, -8
 384              		.cfi_offset 14, -4
 385 0002 0446     		mov	r4, r0
  80:..//kernel/core/tos_tick.c ****     tick_task_takeoff(task);
 386              		.loc 1 80 5 is_stmt 1 view .LVU104
 387 0004 FFF7FEFF 		bl	tick_task_takeoff
 388              	.LVL32:
  81:..//kernel/core/tos_tick.c ****     task_state_reset_sleeping(task);
 389              		.loc 1 81 5 view .LVU105
 390              	.LBB36:
 391              	.LBI36:
 372:..//kernel/core/include/tos_task.h **** {
 392              		.loc 3 372 32 view .LVU106
 393              	.LBB37:
 374:..//kernel/core/include/tos_task.h **** }
 394              		.loc 3 374 5 view .LVU107
 374:..//kernel/core/include/tos_task.h **** }
 395              		.loc 3 374 17 is_stmt 0 view .LVU108
 396 0008 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 397 000c 23F00103 		bic	r3, r3, #1
 398 0010 84F82030 		strb	r3, [r4, #32]
 399              	.LVL33:
 374:..//kernel/core/include/tos_task.h **** }
 400              		.loc 3 374 17 view .LVU109
 401              	.LBE37:
 402              	.LBE36:
  82:..//kernel/core/tos_tick.c **** }
 403              		.loc 1 82 1 view .LVU110
 404 0014 10BD     		pop	{r4, pc}
 405              		.loc 1 82 1 view .LVU111
 406              		.cfi_endproc
 407              	.LFE113:
 409              		.section	.text.tick_update,"ax",%progbits
 410              		.align	1
 411              		.global	tick_update
 412              		.syntax unified
 413              		.thumb
 414              		.thumb_func
 415              		.fpu softvfp
 417              	tick_update:
 418              	.LVL34:
 419              	.LFB114:
  83:..//kernel/core/tos_tick.c **** 
  84:..//kernel/core/tos_tick.c **** __KNL__ void tick_update(k_tick_t tick)
  85:..//kernel/core/tos_tick.c **** {
 420              		.loc 1 85 1 is_stmt 1 view -0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 0
 423              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 20


 424              		.loc 1 85 1 is_stmt 0 view .LVU113
 425 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 426              	.LCFI4:
 427              		.cfi_def_cfa_offset 24
 428              		.cfi_offset 3, -24
 429              		.cfi_offset 4, -20
 430              		.cfi_offset 5, -16
 431              		.cfi_offset 6, -12
 432              		.cfi_offset 7, -8
 433              		.cfi_offset 14, -4
 434 0002 0646     		mov	r6, r0
 435 0004 0F46     		mov	r7, r1
  86:..//kernel/core/tos_tick.c ****     TOS_CPU_CPSR_ALLOC();
 436              		.loc 1 86 5 is_stmt 1 view .LVU114
 437              	.LVL35:
  87:..//kernel/core/tos_tick.c ****     k_task_t *first, *task, *tmp;
 438              		.loc 1 87 5 view .LVU115
  88:..//kernel/core/tos_tick.c **** 
  89:..//kernel/core/tos_tick.c ****     TOS_CPU_INT_DISABLE();
 439              		.loc 1 89 5 view .LVU116
 440              		.loc 1 89 5 view .LVU117
 441 0006 FFF7FEFF 		bl	tos_cpu_cpsr_save
 442              	.LVL36:
 443              		.loc 1 89 5 is_stmt 0 view .LVU118
 444 000a 0546     		mov	r5, r0
 445              	.LVL37:
  90:..//kernel/core/tos_tick.c ****     k_tick_count += tick;
 446              		.loc 1 90 5 is_stmt 1 view .LVU119
 447              		.loc 1 90 18 is_stmt 0 view .LVU120
 448 000c 1E4A     		ldr	r2, .L29
 449 000e 1368     		ldr	r3, [r2]
 450 0010 5168     		ldr	r1, [r2, #4]
 451 0012 9B19     		adds	r3, r3, r6
 452 0014 47EB0101 		adc	r1, r7, r1
 453 0018 1360     		str	r3, [r2]
 454 001a 5160     		str	r1, [r2, #4]
  91:..//kernel/core/tos_tick.c **** 
  92:..//kernel/core/tos_tick.c ****     if (tos_list_empty(&k_tick_list)) {
 455              		.loc 1 92 5 is_stmt 1 view .LVU121
 456              	.LVL38:
 457              	.LBB38:
 458              	.LBI38:
 138:..//kernel/core/include/tos_list.h **** {
 459              		.loc 2 138 31 view .LVU122
 460              	.LBB39:
 461              		.loc 2 140 5 view .LVU123
 462              		.loc 2 140 16 is_stmt 0 view .LVU124
 463 001c 1B4A     		ldr	r2, .L29+4
 464 001e 1368     		ldr	r3, [r2]
 465              	.LVL39:
 466              		.loc 2 140 16 view .LVU125
 467              	.LBE39:
 468              	.LBE38:
 469              		.loc 1 92 8 view .LVU126
 470 0020 9342     		cmp	r3, r2
 471 0022 1FD0     		beq	.L28
  93:..//kernel/core/tos_tick.c ****         TOS_CPU_INT_ENABLE();
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 21


  94:..//kernel/core/tos_tick.c ****         return;
  95:..//kernel/core/tos_tick.c ****     }
  96:..//kernel/core/tos_tick.c **** 
  97:..//kernel/core/tos_tick.c ****     first = TOS_LIST_FIRST_ENTRY(&k_tick_list, k_task_t, tick_list);
 472              		.loc 1 97 5 is_stmt 1 view .LVU127
 473              	.LVL40:
  98:..//kernel/core/tos_tick.c ****     if (first->tick_expires <= tick) {
 474              		.loc 1 98 5 view .LVU128
 475              		.loc 1 98 14 is_stmt 0 view .LVU129
 476 0024 53E90212 		ldrd	r1, [r3, #-8]
 477              		.loc 1 98 8 view .LVU130
 478 0028 9742     		cmp	r7, r2
 479 002a 08BF     		it	eq
 480 002c 8E42     		cmpeq	r6, r1
 481 002e 1CD3     		bcc	.L23
  99:..//kernel/core/tos_tick.c ****         first->tick_expires = (k_tick_t)0u;
 482              		.loc 1 99 9 is_stmt 1 view .LVU131
 483              		.loc 1 99 29 is_stmt 0 view .LVU132
 484 0030 0020     		movs	r0, #0
 485              	.LVL41:
 486              		.loc 1 99 29 view .LVU133
 487 0032 0021     		movs	r1, #0
 488 0034 43E90201 		strd	r0, [r3, #-8]
 100:..//kernel/core/tos_tick.c ****     } else {
 101:..//kernel/core/tos_tick.c ****         first->tick_expires -= tick;
 102:..//kernel/core/tos_tick.c ****         TOS_CPU_INT_ENABLE();
 103:..//kernel/core/tos_tick.c ****         return;
 104:..//kernel/core/tos_tick.c ****     }
 105:..//kernel/core/tos_tick.c **** 
 106:..//kernel/core/tos_tick.c ****     TOS_LIST_FOR_EACH_ENTRY_SAFE(task, tmp, k_task_t, tick_list, &k_tick_list) {
 489              		.loc 1 106 5 is_stmt 1 view .LVU134
 490 0038 144B     		ldr	r3, .L29+4
 491              	.LVL42:
 492              		.loc 1 106 5 is_stmt 0 view .LVU135
 493 003a 1868     		ldr	r0, [r3]
 494              	.LVL43:
 495              		.loc 1 106 5 view .LVU136
 496 003c 50F84849 		ldr	r4, [r0], #-72
 497              	.LVL44:
 498              		.loc 1 106 5 view .LVU137
 499 0040 483C     		subs	r4, r4, #72
 500              	.LVL45:
 501              	.L24:
 502              		.loc 1 106 5 discriminator 1 view .LVU138
 503 0042 00F14802 		add	r2, r0, #72
 504 0046 114B     		ldr	r3, .L29+4
 505 0048 9A42     		cmp	r2, r3
 506 004a 19D0     		beq	.L25
 107:..//kernel/core/tos_tick.c ****         if (task->tick_expires > (k_tick_t)0u) {
 507              		.loc 1 107 9 is_stmt 1 view .LVU139
 508              		.loc 1 107 17 is_stmt 0 view .LVU140
 509 004c D0E91023 		ldrd	r2, [r0, #64]
 510              		.loc 1 107 12 view .LVU141
 511 0050 1343     		orrs	r3, r2, r3
 512 0052 15D1     		bne	.L25
 108:..//kernel/core/tos_tick.c ****             break;
 109:..//kernel/core/tos_tick.c ****         }
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 22


 110:..//kernel/core/tos_tick.c **** 
 111:..//kernel/core/tos_tick.c ****         // we are pending for something, but tick's up, no longer waitting
 112:..//kernel/core/tos_tick.c ****         pend_task_wakeup(task, PEND_STATE_TIMEOUT);
 513              		.loc 1 112 9 is_stmt 1 discriminator 2 view .LVU142
 514 0054 0221     		movs	r1, #2
 515 0056 FFF7FEFF 		bl	pend_task_wakeup
 516              	.LVL46:
 106:..//kernel/core/tos_tick.c ****         if (task->tick_expires > (k_tick_t)0u) {
 517              		.loc 1 106 5 is_stmt 0 discriminator 2 view .LVU143
 518 005a A36C     		ldr	r3, [r4, #72]
 519              	.LVL47:
 106:..//kernel/core/tos_tick.c ****         if (task->tick_expires > (k_tick_t)0u) {
 520              		.loc 1 106 5 discriminator 2 view .LVU144
 521 005c 2046     		mov	r0, r4
 522 005e A3F14804 		sub	r4, r3, #72
 523              	.LVL48:
 106:..//kernel/core/tos_tick.c ****         if (task->tick_expires > (k_tick_t)0u) {
 524              		.loc 1 106 5 discriminator 2 view .LVU145
 525 0062 EEE7     		b	.L24
 526              	.LVL49:
 527              	.L28:
  93:..//kernel/core/tos_tick.c ****         return;
 528              		.loc 1 93 9 is_stmt 1 view .LVU146
  93:..//kernel/core/tos_tick.c ****         return;
 529              		.loc 1 93 9 view .LVU147
 530 0064 FFF7FEFF 		bl	tos_cpu_cpsr_restore
 531              	.LVL50:
  94:..//kernel/core/tos_tick.c ****     }
 532              		.loc 1 94 9 view .LVU148
 533 0068 0DE0     		b	.L20
 534              	.LVL51:
 535              	.L23:
 101:..//kernel/core/tos_tick.c ****         TOS_CPU_INT_ENABLE();
 536              		.loc 1 101 9 view .LVU149
 101:..//kernel/core/tos_tick.c ****         TOS_CPU_INT_ENABLE();
 537              		.loc 1 101 29 is_stmt 0 view .LVU150
 538 006a 881B     		subs	r0, r1, r6
 539              	.LVL52:
 101:..//kernel/core/tos_tick.c ****         TOS_CPU_INT_ENABLE();
 540              		.loc 1 101 29 view .LVU151
 541 006c 62EB0702 		sbc	r2, r2, r7
 542 0070 43F8080C 		str	r0, [r3, #-8]
 543 0074 43F8042C 		str	r2, [r3, #-4]
 102:..//kernel/core/tos_tick.c ****         return;
 544              		.loc 1 102 9 is_stmt 1 view .LVU152
 102:..//kernel/core/tos_tick.c ****         return;
 545              		.loc 1 102 9 view .LVU153
 546 0078 2846     		mov	r0, r5
 547 007a FFF7FEFF 		bl	tos_cpu_cpsr_restore
 548              	.LVL53:
 103:..//kernel/core/tos_tick.c ****     }
 549              		.loc 1 103 9 view .LVU154
 550 007e 02E0     		b	.L20
 551              	.LVL54:
 552              	.L25:
 113:..//kernel/core/tos_tick.c ****     }
 114:..//kernel/core/tos_tick.c **** 
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 23


 115:..//kernel/core/tos_tick.c ****     TOS_CPU_INT_ENABLE();
 553              		.loc 1 115 5 view .LVU155
 554              		.loc 1 115 5 view .LVU156
 555 0080 2846     		mov	r0, r5
 556              	.LVL55:
 557              		.loc 1 115 5 is_stmt 0 view .LVU157
 558 0082 FFF7FEFF 		bl	tos_cpu_cpsr_restore
 559              	.LVL56:
 560              	.L20:
 116:..//kernel/core/tos_tick.c **** }
 561              		.loc 1 116 1 view .LVU158
 562 0086 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 563              	.LVL57:
 564              	.L30:
 565              		.loc 1 116 1 view .LVU159
 566              		.align	2
 567              	.L29:
 568 0088 00000000 		.word	k_tick_count
 569 008c 00000000 		.word	k_tick_list
 570              		.cfi_endproc
 571              	.LFE114:
 573              		.section	.text.tick_next_expires_get,"ax",%progbits
 574              		.align	1
 575              		.global	tick_next_expires_get
 576              		.syntax unified
 577              		.thumb
 578              		.thumb_func
 579              		.fpu softvfp
 581              	tick_next_expires_get:
 582              	.LFB115:
 117:..//kernel/core/tos_tick.c **** 
 118:..//kernel/core/tos_tick.c **** __KNL__ k_tick_t tick_next_expires_get(void)
 119:..//kernel/core/tos_tick.c **** {
 583              		.loc 1 119 1 is_stmt 1 view -0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 0
 586              		@ frame_needed = 0, uses_anonymous_args = 0
 587 0000 38B5     		push	{r3, r4, r5, lr}
 588              	.LCFI5:
 589              		.cfi_def_cfa_offset 16
 590              		.cfi_offset 3, -16
 591              		.cfi_offset 4, -12
 592              		.cfi_offset 5, -8
 593              		.cfi_offset 14, -4
 120:..//kernel/core/tos_tick.c ****     TOS_CPU_CPSR_ALLOC();
 594              		.loc 1 120 5 view .LVU161
 595              	.LVL58:
 121:..//kernel/core/tos_tick.c ****     k_tick_t next_expires;
 596              		.loc 1 121 5 view .LVU162
 122:..//kernel/core/tos_tick.c ****     k_task_t *first;
 597              		.loc 1 122 5 view .LVU163
 123:..//kernel/core/tos_tick.c **** 
 124:..//kernel/core/tos_tick.c ****     TOS_CPU_INT_DISABLE();
 598              		.loc 1 124 5 view .LVU164
 599              		.loc 1 124 5 view .LVU165
 600 0002 FFF7FEFF 		bl	tos_cpu_cpsr_save
 601              	.LVL59:
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 24


 125:..//kernel/core/tos_tick.c **** 
 126:..//kernel/core/tos_tick.c ****     first = TOS_LIST_FIRST_ENTRY_OR_NULL(&k_tick_list, k_task_t, tick_list);
 602              		.loc 1 126 5 view .LVU166
 603              	.LBB40:
 604              	.LBI40:
 138:..//kernel/core/include/tos_list.h **** {
 605              		.loc 2 138 31 view .LVU167
 606              	.LBB41:
 607              		.loc 2 140 5 view .LVU168
 608              		.loc 2 140 16 is_stmt 0 view .LVU169
 609 0006 0B4A     		ldr	r2, .L36
 610 0008 1368     		ldr	r3, [r2]
 611              	.LVL60:
 612              		.loc 2 140 16 view .LVU170
 613              	.LBE41:
 614              	.LBE40:
 615              		.loc 1 126 13 view .LVU171
 616 000a 9342     		cmp	r3, r2
 617 000c 08D0     		beq	.L33
 618              	.LVL61:
 127:..//kernel/core/tos_tick.c ****     next_expires = first ? first->tick_expires : TOS_TIME_FOREVER;
 619              		.loc 1 127 5 is_stmt 1 discriminator 1 view .LVU172
 620              		.loc 1 127 48 is_stmt 0 discriminator 1 view .LVU173
 621 000e 483B     		subs	r3, r3, #72
 622              	.LVL62:
 623              		.loc 1 127 48 discriminator 1 view .LVU174
 624 0010 0BD0     		beq	.L34
 625 0012 D3E91045 		ldrd	r4, [r3, #64]
 626              	.LVL63:
 627              	.L32:
 128:..//kernel/core/tos_tick.c **** 
 129:..//kernel/core/tos_tick.c ****     TOS_CPU_INT_ENABLE();
 628              		.loc 1 129 5 is_stmt 1 discriminator 4 view .LVU175
 629              		.loc 1 129 5 discriminator 4 view .LVU176
 630 0016 FFF7FEFF 		bl	tos_cpu_cpsr_restore
 631              	.LVL64:
 130:..//kernel/core/tos_tick.c ****     return next_expires;
 632              		.loc 1 130 5 discriminator 4 view .LVU177
 131:..//kernel/core/tos_tick.c **** }
 633              		.loc 1 131 1 is_stmt 0 discriminator 4 view .LVU178
 634 001a 2046     		mov	r0, r4
 635 001c 2946     		mov	r1, r5
 636 001e 38BD     		pop	{r3, r4, r5, pc}
 637              	.LVL65:
 638              	.L33:
 127:..//kernel/core/tos_tick.c **** 
 639              		.loc 1 127 48 view .LVU179
 640 0020 4FF0FF34 		mov	r4, #-1
 641 0024 4FF0FF35 		mov	r5, #-1
 642 0028 F5E7     		b	.L32
 643              	.LVL66:
 644              	.L34:
 127:..//kernel/core/tos_tick.c **** 
 645              		.loc 1 127 48 view .LVU180
 646 002a 4FF0FF34 		mov	r4, #-1
 647 002e 4FF0FF35 		mov	r5, #-1
 648 0032 F0E7     		b	.L32
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 25


 649              	.L37:
 650              		.align	2
 651              	.L36:
 652 0034 00000000 		.word	k_tick_list
 653              		.cfi_endproc
 654              	.LFE115:
 656              		.section	.text.tos_tick_handler,"ax",%progbits
 657              		.align	1
 658              		.global	tos_tick_handler
 659              		.syntax unified
 660              		.thumb
 661              		.thumb_func
 662              		.fpu softvfp
 664              	tos_tick_handler:
 665              	.LFB116:
 132:..//kernel/core/tos_tick.c **** 
 133:..//kernel/core/tos_tick.c **** __API__ void tos_tick_handler(void)
 134:..//kernel/core/tos_tick.c **** {
 666              		.loc 1 134 1 is_stmt 1 view -0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 0
 669              		@ frame_needed = 0, uses_anonymous_args = 0
 670 0000 08B5     		push	{r3, lr}
 671              	.LCFI6:
 672              		.cfi_def_cfa_offset 8
 673              		.cfi_offset 3, -8
 674              		.cfi_offset 14, -4
 135:..//kernel/core/tos_tick.c ****     if (unlikely(!tos_knl_is_running())) {
 675              		.loc 1 135 5 view .LVU182
 676              		.loc 1 135 9 is_stmt 0 view .LVU183
 677 0002 FFF7FEFF 		bl	tos_knl_is_running
 678              	.LVL67:
 679              		.loc 1 135 8 view .LVU184
 680 0006 28B1     		cbz	r0, .L38
 136:..//kernel/core/tos_tick.c ****         return;
 137:..//kernel/core/tos_tick.c ****     }
 138:..//kernel/core/tos_tick.c **** 
 139:..//kernel/core/tos_tick.c ****     tick_update((k_tick_t)1u);
 681              		.loc 1 139 5 is_stmt 1 view .LVU185
 682 0008 0120     		movs	r0, #1
 683 000a 0021     		movs	r1, #0
 684 000c FFF7FEFF 		bl	tick_update
 685              	.LVL68:
 140:..//kernel/core/tos_tick.c **** 
 141:..//kernel/core/tos_tick.c **** #if TOS_CFG_TIMER_EN > 0u && TOS_CFG_TIMER_AS_PROC > 0u
 142:..//kernel/core/tos_tick.c ****     timer_update();
 686              		.loc 1 142 5 view .LVU186
 687 0010 FFF7FEFF 		bl	timer_update
 688              	.LVL69:
 689              	.L38:
 143:..//kernel/core/tos_tick.c **** #endif
 144:..//kernel/core/tos_tick.c **** 
 145:..//kernel/core/tos_tick.c **** #if TOS_CFG_ROUND_ROBIN_EN > 0u
 146:..//kernel/core/tos_tick.c ****     robin_sched(k_curr_task->prio);
 147:..//kernel/core/tos_tick.c **** #endif
 148:..//kernel/core/tos_tick.c **** }
 690              		.loc 1 148 1 is_stmt 0 view .LVU187
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 26


 691 0014 08BD     		pop	{r3, pc}
 692              		.cfi_endproc
 693              	.LFE116:
 695              		.text
 696              	.Letext0:
 697              		.file 4 "d:\\arm_gcc\\8 2019-q3-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 698              		.file 5 "d:\\arm_gcc\\8 2019-q3-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 699              		.file 6 "Drivers/CMSIS/Include/core_cm3.h"
 700              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 701              		.file 8 "d:\\arm_gcc\\8 2019-q3-update\\lib\\gcc\\arm-none-eabi\\8.3.1\\include\\stddef.h"
 702              		.file 9 "d:\\arm_gcc\\8 2019-q3-update\\arm-none-eabi\\include\\sys\\_types.h"
 703              		.file 10 "d:\\arm_gcc\\8 2019-q3-update\\arm-none-eabi\\include\\sys\\reent.h"
 704              		.file 11 "d:\\arm_gcc\\8 2019-q3-update\\arm-none-eabi\\include\\sys\\lock.h"
 705              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 706              		.file 13 "..//arch/arm/arm-v7m/common/include/tos_cpu_types.h"
 707              		.file 14 "..//kernel/core/include/tos_ktypes.h"
 708              		.file 15 "d:\\arm_gcc\\8 2019-q3-update\\arm-none-eabi\\include\\stdlib.h"
 709              		.file 16 "..//kernel/core/include/tos_pend.h"
 710              		.file 17 "..//kernel/core/include/tos_sys.h"
 711              		.file 18 "..//kernel/core/include/tos_timer.h"
 712              		.file 19 "..//kernel/core/include/tos_mmheap.h"
 713              		.file 20 "..//kernel/core/include/tos_sched.h"
 714              		.file 21 "..//kernel/core/include/tos_global.h"
 715              		.file 22 "..//arch/arm/arm-v7m/common/include/tos_cpu.h"
ARM GAS  C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s 			page 27


DEFINED SYMBOLS
                            *ABS*:00000000 tos_tick.c
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:16     .text.tick_task_place:00000000 $t
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:23     .text.tick_task_place:00000000 tick_task_place
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:179    .text.tick_task_place:0000008c $d
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:184    .text.tick_task_takeoff:00000000 $t
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:190    .text.tick_task_takeoff:00000000 tick_task_takeoff
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:314    .text.tick_task_takeoff:00000068 $d
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:319    .text.tick_list_add:00000000 $t
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:326    .text.tick_list_add:00000000 tick_list_add
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:365    .text.tick_list_remove:00000000 $t
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:372    .text.tick_list_remove:00000000 tick_list_remove
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:410    .text.tick_update:00000000 $t
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:417    .text.tick_update:00000000 tick_update
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:568    .text.tick_update:00000088 $d
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:574    .text.tick_next_expires_get:00000000 $t
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:581    .text.tick_next_expires_get:00000000 tick_next_expires_get
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:652    .text.tick_next_expires_get:00000034 $d
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:657    .text.tos_tick_handler:00000000 $t
C:\Users\tianx\AppData\Local\Temp\ccetOa0C.s:664    .text.tos_tick_handler:00000000 tos_tick_handler

UNDEFINED SYMBOLS
tos_cpu_cpsr_save
tos_cpu_cpsr_restore
k_tick_list
pend_task_wakeup
k_tick_count
tos_knl_is_running
timer_update
